//*
// Copyright (c) 2024 Peking University and Peking University
// Changsha Institute for Computing and Digital Economy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.2
// source: Plugin.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CranePluginD_StartHook_FullMethodName         = "/crane.grpc.plugin.CranePluginD/StartHook"
	CranePluginD_EndHook_FullMethodName           = "/crane.grpc.plugin.CranePluginD/EndHook"
	CranePluginD_CreateCgroupHook_FullMethodName  = "/crane.grpc.plugin.CranePluginD/CreateCgroupHook"
	CranePluginD_DestroyCgroupHook_FullMethodName = "/crane.grpc.plugin.CranePluginD/DestroyCgroupHook"
)

// CranePluginDClient is the client API for CranePluginD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CranePluginDClient interface {
	// ----------------------------------- Called from CraneCtld ----------------------------------------------------
	StartHook(ctx context.Context, in *StartHookRequest, opts ...grpc.CallOption) (*StartHookReply, error)
	EndHook(ctx context.Context, in *EndHookRequest, opts ...grpc.CallOption) (*EndHookReply, error)
	// ----------------------------------- Called from Craned ----------------------------------------------------
	CreateCgroupHook(ctx context.Context, in *CreateCgroupHookRequest, opts ...grpc.CallOption) (*CreateCgroupHookReply, error)
	DestroyCgroupHook(ctx context.Context, in *DestroyCgroupHookRequest, opts ...grpc.CallOption) (*DestroyCgroupHookReply, error)
}

type cranePluginDClient struct {
	cc grpc.ClientConnInterface
}

func NewCranePluginDClient(cc grpc.ClientConnInterface) CranePluginDClient {
	return &cranePluginDClient{cc}
}

func (c *cranePluginDClient) StartHook(ctx context.Context, in *StartHookRequest, opts ...grpc.CallOption) (*StartHookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartHookReply)
	err := c.cc.Invoke(ctx, CranePluginD_StartHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cranePluginDClient) EndHook(ctx context.Context, in *EndHookRequest, opts ...grpc.CallOption) (*EndHookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndHookReply)
	err := c.cc.Invoke(ctx, CranePluginD_EndHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cranePluginDClient) CreateCgroupHook(ctx context.Context, in *CreateCgroupHookRequest, opts ...grpc.CallOption) (*CreateCgroupHookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCgroupHookReply)
	err := c.cc.Invoke(ctx, CranePluginD_CreateCgroupHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cranePluginDClient) DestroyCgroupHook(ctx context.Context, in *DestroyCgroupHookRequest, opts ...grpc.CallOption) (*DestroyCgroupHookReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyCgroupHookReply)
	err := c.cc.Invoke(ctx, CranePluginD_DestroyCgroupHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CranePluginDServer is the server API for CranePluginD service.
// All implementations must embed UnimplementedCranePluginDServer
// for forward compatibility.
type CranePluginDServer interface {
	// ----------------------------------- Called from CraneCtld ----------------------------------------------------
	StartHook(context.Context, *StartHookRequest) (*StartHookReply, error)
	EndHook(context.Context, *EndHookRequest) (*EndHookReply, error)
	// ----------------------------------- Called from Craned ----------------------------------------------------
	CreateCgroupHook(context.Context, *CreateCgroupHookRequest) (*CreateCgroupHookReply, error)
	DestroyCgroupHook(context.Context, *DestroyCgroupHookRequest) (*DestroyCgroupHookReply, error)
	mustEmbedUnimplementedCranePluginDServer()
}

// UnimplementedCranePluginDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCranePluginDServer struct{}

func (UnimplementedCranePluginDServer) StartHook(context.Context, *StartHookRequest) (*StartHookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHook not implemented")
}
func (UnimplementedCranePluginDServer) EndHook(context.Context, *EndHookRequest) (*EndHookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndHook not implemented")
}
func (UnimplementedCranePluginDServer) CreateCgroupHook(context.Context, *CreateCgroupHookRequest) (*CreateCgroupHookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCgroupHook not implemented")
}
func (UnimplementedCranePluginDServer) DestroyCgroupHook(context.Context, *DestroyCgroupHookRequest) (*DestroyCgroupHookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCgroupHook not implemented")
}
func (UnimplementedCranePluginDServer) mustEmbedUnimplementedCranePluginDServer() {}
func (UnimplementedCranePluginDServer) testEmbeddedByValue()                      {}

// UnsafeCranePluginDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CranePluginDServer will
// result in compilation errors.
type UnsafeCranePluginDServer interface {
	mustEmbedUnimplementedCranePluginDServer()
}

func RegisterCranePluginDServer(s grpc.ServiceRegistrar, srv CranePluginDServer) {
	// If the following call pancis, it indicates UnimplementedCranePluginDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CranePluginD_ServiceDesc, srv)
}

func _CranePluginD_StartHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CranePluginDServer).StartHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CranePluginD_StartHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CranePluginDServer).StartHook(ctx, req.(*StartHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CranePluginD_EndHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CranePluginDServer).EndHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CranePluginD_EndHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CranePluginDServer).EndHook(ctx, req.(*EndHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CranePluginD_CreateCgroupHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCgroupHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CranePluginDServer).CreateCgroupHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CranePluginD_CreateCgroupHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CranePluginDServer).CreateCgroupHook(ctx, req.(*CreateCgroupHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CranePluginD_DestroyCgroupHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyCgroupHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CranePluginDServer).DestroyCgroupHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CranePluginD_DestroyCgroupHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CranePluginDServer).DestroyCgroupHook(ctx, req.(*DestroyCgroupHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CranePluginD_ServiceDesc is the grpc.ServiceDesc for CranePluginD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CranePluginD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crane.grpc.plugin.CranePluginD",
	HandlerType: (*CranePluginDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartHook",
			Handler:    _CranePluginD_StartHook_Handler,
		},
		{
			MethodName: "EndHook",
			Handler:    _CranePluginD_EndHook_Handler,
		},
		{
			MethodName: "CreateCgroupHook",
			Handler:    _CranePluginD_CreateCgroupHook_Handler,
		},
		{
			MethodName: "DestroyCgroupHook",
			Handler:    _CranePluginD_DestroyCgroupHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Plugin.proto",
}
