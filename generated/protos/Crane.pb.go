//*
// Copyright (c) 2024 Peking University and Peking University
// Changsha Institute for Computing and Digital Economy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.23.2
// source: Crane.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModifyTaskRequest_TargetAttributes int32

const (
	ModifyTaskRequest_TimeLimit ModifyTaskRequest_TargetAttributes = 0
	ModifyTaskRequest_Priority  ModifyTaskRequest_TargetAttributes = 1
	ModifyTaskRequest_Hold      ModifyTaskRequest_TargetAttributes = 2
)

// Enum value maps for ModifyTaskRequest_TargetAttributes.
var (
	ModifyTaskRequest_TargetAttributes_name = map[int32]string{
		0: "TimeLimit",
		1: "Priority",
		2: "Hold",
	}
	ModifyTaskRequest_TargetAttributes_value = map[string]int32{
		"TimeLimit": 0,
		"Priority":  1,
		"Hold":      2,
	}
)

func (x ModifyTaskRequest_TargetAttributes) Enum() *ModifyTaskRequest_TargetAttributes {
	p := new(ModifyTaskRequest_TargetAttributes)
	*p = x
	return p
}

func (x ModifyTaskRequest_TargetAttributes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyTaskRequest_TargetAttributes) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[0].Descriptor()
}

func (ModifyTaskRequest_TargetAttributes) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[0]
}

func (x ModifyTaskRequest_TargetAttributes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyTaskRequest_TargetAttributes.Descriptor instead.
func (ModifyTaskRequest_TargetAttributes) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{34, 0}
}

type StreamCallocRequest_CallocRequestType int32

const (
	StreamCallocRequest_TASK_REQUEST            StreamCallocRequest_CallocRequestType = 0
	StreamCallocRequest_TASK_COMPLETION_REQUEST StreamCallocRequest_CallocRequestType = 1
)

// Enum value maps for StreamCallocRequest_CallocRequestType.
var (
	StreamCallocRequest_CallocRequestType_name = map[int32]string{
		0: "TASK_REQUEST",
		1: "TASK_COMPLETION_REQUEST",
	}
	StreamCallocRequest_CallocRequestType_value = map[string]int32{
		"TASK_REQUEST":            0,
		"TASK_COMPLETION_REQUEST": 1,
	}
)

func (x StreamCallocRequest_CallocRequestType) Enum() *StreamCallocRequest_CallocRequestType {
	p := new(StreamCallocRequest_CallocRequestType)
	*p = x
	return p
}

func (x StreamCallocRequest_CallocRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCallocRequest_CallocRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[1].Descriptor()
}

func (StreamCallocRequest_CallocRequestType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[1]
}

func (x StreamCallocRequest_CallocRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCallocRequest_CallocRequestType.Descriptor instead.
func (StreamCallocRequest_CallocRequestType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{74, 0}
}

type StreamCforedReply_CforedReplyType int32

const (
	StreamCforedReply_TASK_ID_REPLY             StreamCforedReply_CforedReplyType = 0
	StreamCforedReply_TASK_RES_ALLOC_REPLY      StreamCforedReply_CforedReplyType = 1
	StreamCforedReply_TASK_CANCEL_REQUEST       StreamCforedReply_CforedReplyType = 2
	StreamCforedReply_TASK_COMPLETION_ACK_REPLY StreamCforedReply_CforedReplyType = 3
)

// Enum value maps for StreamCforedReply_CforedReplyType.
var (
	StreamCforedReply_CforedReplyType_name = map[int32]string{
		0: "TASK_ID_REPLY",
		1: "TASK_RES_ALLOC_REPLY",
		2: "TASK_CANCEL_REQUEST",
		3: "TASK_COMPLETION_ACK_REPLY",
	}
	StreamCforedReply_CforedReplyType_value = map[string]int32{
		"TASK_ID_REPLY":             0,
		"TASK_RES_ALLOC_REPLY":      1,
		"TASK_CANCEL_REQUEST":       2,
		"TASK_COMPLETION_ACK_REPLY": 3,
	}
)

func (x StreamCforedReply_CforedReplyType) Enum() *StreamCforedReply_CforedReplyType {
	p := new(StreamCforedReply_CforedReplyType)
	*p = x
	return p
}

func (x StreamCforedReply_CforedReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCforedReply_CforedReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[2].Descriptor()
}

func (StreamCforedReply_CforedReplyType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[2]
}

func (x StreamCforedReply_CforedReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCforedReply_CforedReplyType.Descriptor instead.
func (StreamCforedReply_CforedReplyType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75, 0}
}

type StreamCforedRequest_CforedRequestType int32

const (
	StreamCforedRequest_CFORED_REGISTRATION     StreamCforedRequest_CforedRequestType = 0
	StreamCforedRequest_TASK_REQUEST            StreamCforedRequest_CforedRequestType = 1
	StreamCforedRequest_TASK_COMPLETION_REQUEST StreamCforedRequest_CforedRequestType = 2
	StreamCforedRequest_CFORED_GRACEFUL_EXIT    StreamCforedRequest_CforedRequestType = 3
)

// Enum value maps for StreamCforedRequest_CforedRequestType.
var (
	StreamCforedRequest_CforedRequestType_name = map[int32]string{
		0: "CFORED_REGISTRATION",
		1: "TASK_REQUEST",
		2: "TASK_COMPLETION_REQUEST",
		3: "CFORED_GRACEFUL_EXIT",
	}
	StreamCforedRequest_CforedRequestType_value = map[string]int32{
		"CFORED_REGISTRATION":     0,
		"TASK_REQUEST":            1,
		"TASK_COMPLETION_REQUEST": 2,
		"CFORED_GRACEFUL_EXIT":    3,
	}
)

func (x StreamCforedRequest_CforedRequestType) Enum() *StreamCforedRequest_CforedRequestType {
	p := new(StreamCforedRequest_CforedRequestType)
	*p = x
	return p
}

func (x StreamCforedRequest_CforedRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCforedRequest_CforedRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[3].Descriptor()
}

func (StreamCforedRequest_CforedRequestType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[3]
}

func (x StreamCforedRequest_CforedRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCforedRequest_CforedRequestType.Descriptor instead.
func (StreamCforedRequest_CforedRequestType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76, 0}
}

type StreamCtldReply_CtldReplyType int32

const (
	StreamCtldReply_TASK_ID_REPLY             StreamCtldReply_CtldReplyType = 0
	StreamCtldReply_TASK_RES_ALLOC_REPLY      StreamCtldReply_CtldReplyType = 1
	StreamCtldReply_TASK_CANCEL_REQUEST       StreamCtldReply_CtldReplyType = 2
	StreamCtldReply_TASK_COMPLETION_ACK_REPLY StreamCtldReply_CtldReplyType = 3
	StreamCtldReply_CFORED_REGISTRATION_ACK   StreamCtldReply_CtldReplyType = 4
	StreamCtldReply_CFORED_GRACEFUL_EXIT_ACK  StreamCtldReply_CtldReplyType = 5
)

// Enum value maps for StreamCtldReply_CtldReplyType.
var (
	StreamCtldReply_CtldReplyType_name = map[int32]string{
		0: "TASK_ID_REPLY",
		1: "TASK_RES_ALLOC_REPLY",
		2: "TASK_CANCEL_REQUEST",
		3: "TASK_COMPLETION_ACK_REPLY",
		4: "CFORED_REGISTRATION_ACK",
		5: "CFORED_GRACEFUL_EXIT_ACK",
	}
	StreamCtldReply_CtldReplyType_value = map[string]int32{
		"TASK_ID_REPLY":             0,
		"TASK_RES_ALLOC_REPLY":      1,
		"TASK_CANCEL_REQUEST":       2,
		"TASK_COMPLETION_ACK_REPLY": 3,
		"CFORED_REGISTRATION_ACK":   4,
		"CFORED_GRACEFUL_EXIT_ACK":  5,
	}
)

func (x StreamCtldReply_CtldReplyType) Enum() *StreamCtldReply_CtldReplyType {
	p := new(StreamCtldReply_CtldReplyType)
	*p = x
	return p
}

func (x StreamCtldReply_CtldReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCtldReply_CtldReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[4].Descriptor()
}

func (StreamCtldReply_CtldReplyType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[4]
}

func (x StreamCtldReply_CtldReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCtldReply_CtldReplyType.Descriptor instead.
func (StreamCtldReply_CtldReplyType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 0}
}

type StreamCrunRequest_CrunRequestType int32

const (
	StreamCrunRequest_TASK_REQUEST            StreamCrunRequest_CrunRequestType = 0
	StreamCrunRequest_TASK_COMPLETION_REQUEST StreamCrunRequest_CrunRequestType = 1
	StreamCrunRequest_TASK_IO_FORWARD         StreamCrunRequest_CrunRequestType = 2
)

// Enum value maps for StreamCrunRequest_CrunRequestType.
var (
	StreamCrunRequest_CrunRequestType_name = map[int32]string{
		0: "TASK_REQUEST",
		1: "TASK_COMPLETION_REQUEST",
		2: "TASK_IO_FORWARD",
	}
	StreamCrunRequest_CrunRequestType_value = map[string]int32{
		"TASK_REQUEST":            0,
		"TASK_COMPLETION_REQUEST": 1,
		"TASK_IO_FORWARD":         2,
	}
)

func (x StreamCrunRequest_CrunRequestType) Enum() *StreamCrunRequest_CrunRequestType {
	p := new(StreamCrunRequest_CrunRequestType)
	*p = x
	return p
}

func (x StreamCrunRequest_CrunRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCrunRequest_CrunRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[5].Descriptor()
}

func (StreamCrunRequest_CrunRequestType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[5]
}

func (x StreamCrunRequest_CrunRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCrunRequest_CrunRequestType.Descriptor instead.
func (StreamCrunRequest_CrunRequestType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{80, 0}
}

type StreamCforedCrunReply_CforedCrunReplyType int32

const (
	StreamCforedCrunReply_TASK_ID_REPLY             StreamCforedCrunReply_CforedCrunReplyType = 0
	StreamCforedCrunReply_TASK_RES_ALLOC_REPLY      StreamCforedCrunReply_CforedCrunReplyType = 1
	StreamCforedCrunReply_TASK_CANCEL_REQUEST       StreamCforedCrunReply_CforedCrunReplyType = 2
	StreamCforedCrunReply_TASK_COMPLETION_ACK_REPLY StreamCforedCrunReply_CforedCrunReplyType = 3
	StreamCforedCrunReply_TASK_IO_FORWARD           StreamCforedCrunReply_CforedCrunReplyType = 4
	StreamCforedCrunReply_TASK_IO_FORWARD_READY     StreamCforedCrunReply_CforedCrunReplyType = 5
)

// Enum value maps for StreamCforedCrunReply_CforedCrunReplyType.
var (
	StreamCforedCrunReply_CforedCrunReplyType_name = map[int32]string{
		0: "TASK_ID_REPLY",
		1: "TASK_RES_ALLOC_REPLY",
		2: "TASK_CANCEL_REQUEST",
		3: "TASK_COMPLETION_ACK_REPLY",
		4: "TASK_IO_FORWARD",
		5: "TASK_IO_FORWARD_READY",
	}
	StreamCforedCrunReply_CforedCrunReplyType_value = map[string]int32{
		"TASK_ID_REPLY":             0,
		"TASK_RES_ALLOC_REPLY":      1,
		"TASK_CANCEL_REQUEST":       2,
		"TASK_COMPLETION_ACK_REPLY": 3,
		"TASK_IO_FORWARD":           4,
		"TASK_IO_FORWARD_READY":     5,
	}
)

func (x StreamCforedCrunReply_CforedCrunReplyType) Enum() *StreamCforedCrunReply_CforedCrunReplyType {
	p := new(StreamCforedCrunReply_CforedCrunReplyType)
	*p = x
	return p
}

func (x StreamCforedCrunReply_CforedCrunReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCforedCrunReply_CforedCrunReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[6].Descriptor()
}

func (StreamCforedCrunReply_CforedCrunReplyType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[6]
}

func (x StreamCforedCrunReply_CforedCrunReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCforedCrunReply_CforedCrunReplyType.Descriptor instead.
func (StreamCforedCrunReply_CforedCrunReplyType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 0}
}

type StreamCforedTaskIORequest_CranedRequestType int32

const (
	StreamCforedTaskIORequest_CRANED_REGISTER    StreamCforedTaskIORequest_CranedRequestType = 0
	StreamCforedTaskIORequest_CRANED_TASK_OUTPUT StreamCforedTaskIORequest_CranedRequestType = 1
	StreamCforedTaskIORequest_CRANED_UNREGISTER  StreamCforedTaskIORequest_CranedRequestType = 2
)

// Enum value maps for StreamCforedTaskIORequest_CranedRequestType.
var (
	StreamCforedTaskIORequest_CranedRequestType_name = map[int32]string{
		0: "CRANED_REGISTER",
		1: "CRANED_TASK_OUTPUT",
		2: "CRANED_UNREGISTER",
	}
	StreamCforedTaskIORequest_CranedRequestType_value = map[string]int32{
		"CRANED_REGISTER":    0,
		"CRANED_TASK_OUTPUT": 1,
		"CRANED_UNREGISTER":  2,
	}
)

func (x StreamCforedTaskIORequest_CranedRequestType) Enum() *StreamCforedTaskIORequest_CranedRequestType {
	p := new(StreamCforedTaskIORequest_CranedRequestType)
	*p = x
	return p
}

func (x StreamCforedTaskIORequest_CranedRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCforedTaskIORequest_CranedRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[7].Descriptor()
}

func (StreamCforedTaskIORequest_CranedRequestType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[7]
}

func (x StreamCforedTaskIORequest_CranedRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCforedTaskIORequest_CranedRequestType.Descriptor instead.
func (StreamCforedTaskIORequest_CranedRequestType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{82, 0}
}

type StreamCforedTaskIOReply_CranedReplyType int32

const (
	StreamCforedTaskIOReply_CRANED_REGISTER_REPLY   StreamCforedTaskIOReply_CranedReplyType = 0
	StreamCforedTaskIOReply_CRANED_TASK_INPUT       StreamCforedTaskIOReply_CranedReplyType = 1
	StreamCforedTaskIOReply_CRANED_UNREGISTER_REPLY StreamCforedTaskIOReply_CranedReplyType = 2
)

// Enum value maps for StreamCforedTaskIOReply_CranedReplyType.
var (
	StreamCforedTaskIOReply_CranedReplyType_name = map[int32]string{
		0: "CRANED_REGISTER_REPLY",
		1: "CRANED_TASK_INPUT",
		2: "CRANED_UNREGISTER_REPLY",
	}
	StreamCforedTaskIOReply_CranedReplyType_value = map[string]int32{
		"CRANED_REGISTER_REPLY":   0,
		"CRANED_TASK_INPUT":       1,
		"CRANED_UNREGISTER_REPLY": 2,
	}
)

func (x StreamCforedTaskIOReply_CranedReplyType) Enum() *StreamCforedTaskIOReply_CranedReplyType {
	p := new(StreamCforedTaskIOReply_CranedReplyType)
	*p = x
	return p
}

func (x StreamCforedTaskIOReply_CranedReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCforedTaskIOReply_CranedReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Crane_proto_enumTypes[8].Descriptor()
}

func (StreamCforedTaskIOReply_CranedReplyType) Type() protoreflect.EnumType {
	return &file_Crane_proto_enumTypes[8]
}

func (x StreamCforedTaskIOReply_CranedReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCforedTaskIOReply_CranedReplyType.Descriptor instead.
func (StreamCforedTaskIOReply_CranedReplyType) EnumDescriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{83, 0}
}

type TaskStatusChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    uint32     `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CranedId  string     `protobuf:"bytes,2,opt,name=craned_id,json=cranedId,proto3" json:"craned_id,omitempty"`
	NewStatus TaskStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=crane.grpc.TaskStatus" json:"new_status,omitempty"`
	ExitCode  uint32     `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Reason    string     `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TaskStatusChangeRequest) Reset() {
	*x = TaskStatusChangeRequest{}
	mi := &file_Crane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusChangeRequest) ProtoMessage() {}

func (x *TaskStatusChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusChangeRequest.ProtoReflect.Descriptor instead.
func (*TaskStatusChangeRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{0}
}

func (x *TaskStatusChangeRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskStatusChangeRequest) GetCranedId() string {
	if x != nil {
		return x.CranedId
	}
	return ""
}

func (x *TaskStatusChangeRequest) GetNewStatus() TaskStatus {
	if x != nil {
		return x.NewStatus
	}
	return TaskStatus_Pending
}

func (x *TaskStatusChangeRequest) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TaskStatusChangeRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TaskStatusChangeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *TaskStatusChangeReply) Reset() {
	*x = TaskStatusChangeReply{}
	mi := &file_Crane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusChangeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusChangeReply) ProtoMessage() {}

func (x *TaskStatusChangeReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusChangeReply.ProtoReflect.Descriptor instead.
func (*TaskStatusChangeReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStatusChangeReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type CranedRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CranedId string `protobuf:"bytes,1,opt,name=craned_id,json=cranedId,proto3" json:"craned_id,omitempty"`
}

func (x *CranedRegisterRequest) Reset() {
	*x = CranedRegisterRequest{}
	mi := &file_Crane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CranedRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CranedRegisterRequest) ProtoMessage() {}

func (x *CranedRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CranedRegisterRequest.ProtoReflect.Descriptor instead.
func (*CranedRegisterRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{2}
}

func (x *CranedRegisterRequest) GetCranedId() string {
	if x != nil {
		return x.CranedId
	}
	return ""
}

type CranedRegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok                bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	AlreadyRegistered bool `protobuf:"varint,2,opt,name=already_registered,json=alreadyRegistered,proto3" json:"already_registered,omitempty"`
}

func (x *CranedRegisterReply) Reset() {
	*x = CranedRegisterReply{}
	mi := &file_Crane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CranedRegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CranedRegisterReply) ProtoMessage() {}

func (x *CranedRegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CranedRegisterReply.ProtoReflect.Descriptor instead.
func (*CranedRegisterReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{3}
}

func (x *CranedRegisterReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *CranedRegisterReply) GetAlreadyRegistered() bool {
	if x != nil {
		return x.AlreadyRegistered
	}
	return false
}

type QueryCranedListFromTaskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *QueryCranedListFromTaskIdRequest) Reset() {
	*x = QueryCranedListFromTaskIdRequest{}
	mi := &file_Crane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedListFromTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedListFromTaskIdRequest) ProtoMessage() {}

func (x *QueryCranedListFromTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedListFromTaskIdRequest.ProtoReflect.Descriptor instead.
func (*QueryCranedListFromTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCranedListFromTaskIdRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type QueryCranedListFromTaskIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	CranedList string `protobuf:"bytes,2,opt,name=craned_list,json=cranedList,proto3" json:"craned_list,omitempty"`
}

func (x *QueryCranedListFromTaskIdReply) Reset() {
	*x = QueryCranedListFromTaskIdReply{}
	mi := &file_Crane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedListFromTaskIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedListFromTaskIdReply) ProtoMessage() {}

func (x *QueryCranedListFromTaskIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedListFromTaskIdReply.ProtoReflect.Descriptor instead.
func (*QueryCranedListFromTaskIdReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{5}
}

func (x *QueryCranedListFromTaskIdReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryCranedListFromTaskIdReply) GetCranedList() string {
	if x != nil {
		return x.CranedList
	}
	return ""
}

type SubmitBatchTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskToCtld `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *SubmitBatchTaskRequest) Reset() {
	*x = SubmitBatchTaskRequest{}
	mi := &file_Crane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchTaskRequest) ProtoMessage() {}

func (x *SubmitBatchTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchTaskRequest.ProtoReflect.Descriptor instead.
func (*SubmitBatchTaskRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitBatchTaskRequest) GetTask() *TaskToCtld {
	if x != nil {
		return x.Task
	}
	return nil
}

type SubmitBatchTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*SubmitBatchTaskReply_TaskId
	//	*SubmitBatchTaskReply_Reason
	Payload isSubmitBatchTaskReply_Payload `protobuf_oneof:"payload"`
}

func (x *SubmitBatchTaskReply) Reset() {
	*x = SubmitBatchTaskReply{}
	mi := &file_Crane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchTaskReply) ProtoMessage() {}

func (x *SubmitBatchTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchTaskReply.ProtoReflect.Descriptor instead.
func (*SubmitBatchTaskReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitBatchTaskReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (m *SubmitBatchTaskReply) GetPayload() isSubmitBatchTaskReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SubmitBatchTaskReply) GetTaskId() uint32 {
	if x, ok := x.GetPayload().(*SubmitBatchTaskReply_TaskId); ok {
		return x.TaskId
	}
	return 0
}

func (x *SubmitBatchTaskReply) GetReason() string {
	if x, ok := x.GetPayload().(*SubmitBatchTaskReply_Reason); ok {
		return x.Reason
	}
	return ""
}

type isSubmitBatchTaskReply_Payload interface {
	isSubmitBatchTaskReply_Payload()
}

type SubmitBatchTaskReply_TaskId struct {
	TaskId uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3,oneof"`
}

type SubmitBatchTaskReply_Reason struct {
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3,oneof"`
}

func (*SubmitBatchTaskReply_TaskId) isSubmitBatchTaskReply_Payload() {}

func (*SubmitBatchTaskReply_Reason) isSubmitBatchTaskReply_Payload() {}

type SubmitBatchTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task  *TaskToCtld `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Count uint32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SubmitBatchTasksRequest) Reset() {
	*x = SubmitBatchTasksRequest{}
	mi := &file_Crane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchTasksRequest) ProtoMessage() {}

func (x *SubmitBatchTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchTasksRequest.ProtoReflect.Descriptor instead.
func (*SubmitBatchTasksRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitBatchTasksRequest) GetTask() *TaskToCtld {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *SubmitBatchTasksRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SubmitBatchTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdList []uint32 `protobuf:"varint,1,rep,packed,name=task_id_list,json=taskIdList,proto3" json:"task_id_list,omitempty"`
	ReasonList []string `protobuf:"bytes,2,rep,name=reason_list,json=reasonList,proto3" json:"reason_list,omitempty"`
}

func (x *SubmitBatchTasksReply) Reset() {
	*x = SubmitBatchTasksReply{}
	mi := &file_Crane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchTasksReply) ProtoMessage() {}

func (x *SubmitBatchTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchTasksReply.ProtoReflect.Descriptor instead.
func (*SubmitBatchTasksReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitBatchTasksReply) GetTaskIdList() []uint32 {
	if x != nil {
		return x.TaskIdList
	}
	return nil
}

func (x *SubmitBatchTasksReply) GetReasonList() []string {
	if x != nil {
		return x.ReasonList
	}
	return nil
}

type ExecuteTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskToD `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ExecuteTasksRequest) Reset() {
	*x = ExecuteTasksRequest{}
	mi := &file_Crane_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTasksRequest) ProtoMessage() {}

func (x *ExecuteTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTasksRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTasksRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteTasksRequest) GetTasks() []*TaskToD {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ExecuteTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedTaskIdList []uint32 `protobuf:"varint,1,rep,packed,name=failed_task_id_list,json=failedTaskIdList,proto3" json:"failed_task_id_list,omitempty"`
}

func (x *ExecuteTasksReply) Reset() {
	*x = ExecuteTasksReply{}
	mi := &file_Crane_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTasksReply) ProtoMessage() {}

func (x *ExecuteTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTasksReply.ProtoReflect.Descriptor instead.
func (*ExecuteTasksReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteTasksReply) GetFailedTaskIdList() []uint32 {
	if x != nil {
		return x.FailedTaskIdList
	}
	return nil
}

type CreateCgroupForTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdList    []uint32          `protobuf:"varint,1,rep,packed,name=task_id_list,json=taskIdList,proto3" json:"task_id_list,omitempty"`
	UidList       []uint32          `protobuf:"varint,2,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	ResList       []*ResourceInNode `protobuf:"bytes,3,rep,name=res_list,json=resList,proto3" json:"res_list,omitempty"`
	ExecutionNode []string          `protobuf:"bytes,4,rep,name=execution_node,json=executionNode,proto3" json:"execution_node,omitempty"`
}

func (x *CreateCgroupForTasksRequest) Reset() {
	*x = CreateCgroupForTasksRequest{}
	mi := &file_Crane_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCgroupForTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCgroupForTasksRequest) ProtoMessage() {}

func (x *CreateCgroupForTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCgroupForTasksRequest.ProtoReflect.Descriptor instead.
func (*CreateCgroupForTasksRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCgroupForTasksRequest) GetTaskIdList() []uint32 {
	if x != nil {
		return x.TaskIdList
	}
	return nil
}

func (x *CreateCgroupForTasksRequest) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *CreateCgroupForTasksRequest) GetResList() []*ResourceInNode {
	if x != nil {
		return x.ResList
	}
	return nil
}

func (x *CreateCgroupForTasksRequest) GetExecutionNode() []string {
	if x != nil {
		return x.ExecutionNode
	}
	return nil
}

type CreateCgroupForTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCgroupForTasksReply) Reset() {
	*x = CreateCgroupForTasksReply{}
	mi := &file_Crane_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCgroupForTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCgroupForTasksReply) ProtoMessage() {}

func (x *CreateCgroupForTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCgroupForTasksReply.ProtoReflect.Descriptor instead.
func (*CreateCgroupForTasksReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{13}
}

type ReleaseCgroupForTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdList []uint32 `protobuf:"varint,1,rep,packed,name=task_id_list,json=taskIdList,proto3" json:"task_id_list,omitempty"`
	UidList    []uint32 `protobuf:"varint,2,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *ReleaseCgroupForTasksRequest) Reset() {
	*x = ReleaseCgroupForTasksRequest{}
	mi := &file_Crane_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseCgroupForTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCgroupForTasksRequest) ProtoMessage() {}

func (x *ReleaseCgroupForTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCgroupForTasksRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCgroupForTasksRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseCgroupForTasksRequest) GetTaskIdList() []uint32 {
	if x != nil {
		return x.TaskIdList
	}
	return nil
}

func (x *ReleaseCgroupForTasksRequest) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type ReleaseCgroupForTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseCgroupForTasksReply) Reset() {
	*x = ReleaseCgroupForTasksReply{}
	mi := &file_Crane_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseCgroupForTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCgroupForTasksReply) ProtoMessage() {}

func (x *ReleaseCgroupForTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCgroupForTasksReply.ProtoReflect.Descriptor instead.
func (*ReleaseCgroupForTasksReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{15}
}

type TerminateTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdList []uint32 `protobuf:"varint,1,rep,packed,name=task_id_list,json=taskIdList,proto3" json:"task_id_list,omitempty"`
}

func (x *TerminateTasksRequest) Reset() {
	*x = TerminateTasksRequest{}
	mi := &file_Crane_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateTasksRequest) ProtoMessage() {}

func (x *TerminateTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateTasksRequest.ProtoReflect.Descriptor instead.
func (*TerminateTasksRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{16}
}

func (x *TerminateTasksRequest) GetTaskIdList() []uint32 {
	if x != nil {
		return x.TaskIdList
	}
	return nil
}

type TerminateTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TerminateTasksReply) Reset() {
	*x = TerminateTasksReply{}
	mi := &file_Crane_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateTasksReply) ProtoMessage() {}

func (x *TerminateTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateTasksReply.ProtoReflect.Descriptor instead.
func (*TerminateTasksReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{17}
}

func (x *TerminateTasksReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *TerminateTasksReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TerminateOrphanedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TerminateOrphanedTaskRequest) Reset() {
	*x = TerminateOrphanedTaskRequest{}
	mi := &file_Crane_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateOrphanedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateOrphanedTaskRequest) ProtoMessage() {}

func (x *TerminateOrphanedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateOrphanedTaskRequest.ProtoReflect.Descriptor instead.
func (*TerminateOrphanedTaskRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{18}
}

func (x *TerminateOrphanedTaskRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type TerminateOrphanedTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TerminateOrphanedTaskReply) Reset() {
	*x = TerminateOrphanedTaskReply{}
	mi := &file_Crane_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateOrphanedTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateOrphanedTaskReply) ProtoMessage() {}

func (x *TerminateOrphanedTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateOrphanedTaskReply.ProtoReflect.Descriptor instead.
func (*TerminateOrphanedTaskReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{19}
}

func (x *TerminateOrphanedTaskReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *TerminateOrphanedTaskReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ChangeTaskTimeLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TimeLimitSeconds int64  `protobuf:"varint,2,opt,name=time_limit_seconds,json=timeLimitSeconds,proto3" json:"time_limit_seconds,omitempty"`
}

func (x *ChangeTaskTimeLimitRequest) Reset() {
	*x = ChangeTaskTimeLimitRequest{}
	mi := &file_Crane_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTaskTimeLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTaskTimeLimitRequest) ProtoMessage() {}

func (x *ChangeTaskTimeLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTaskTimeLimitRequest.ProtoReflect.Descriptor instead.
func (*ChangeTaskTimeLimitRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{20}
}

func (x *ChangeTaskTimeLimitRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ChangeTaskTimeLimitRequest) GetTimeLimitSeconds() int64 {
	if x != nil {
		return x.TimeLimitSeconds
	}
	return 0
}

type ChangeTaskTimeLimitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *ChangeTaskTimeLimitReply) Reset() {
	*x = ChangeTaskTimeLimitReply{}
	mi := &file_Crane_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTaskTimeLimitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTaskTimeLimitReply) ProtoMessage() {}

func (x *ChangeTaskTimeLimitReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTaskTimeLimitReply.ProtoReflect.Descriptor instead.
func (*ChangeTaskTimeLimitReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{21}
}

func (x *ChangeTaskTimeLimitReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type CheckTaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CheckTaskStatusRequest) Reset() {
	*x = CheckTaskStatusRequest{}
	mi := &file_Crane_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTaskStatusRequest) ProtoMessage() {}

func (x *CheckTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{22}
}

func (x *CheckTaskStatusRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CheckTaskStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool       `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Status TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
}

func (x *CheckTaskStatusReply) Reset() {
	*x = CheckTaskStatusReply{}
	mi := &file_Crane_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckTaskStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTaskStatusReply) ProtoMessage() {}

func (x *CheckTaskStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTaskStatusReply.ProtoReflect.Descriptor instead.
func (*CheckTaskStatusReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{23}
}

func (x *CheckTaskStatusReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *CheckTaskStatusReply) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

type CancelTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUid uint32 `protobuf:"varint,1,opt,name=operator_uid,json=operatorUid,proto3" json:"operator_uid,omitempty"`
	// Filters
	FilterTaskIds   []uint32   `protobuf:"varint,2,rep,packed,name=filter_task_ids,json=filterTaskIds,proto3" json:"filter_task_ids,omitempty"`
	FilterPartition string     `protobuf:"bytes,3,opt,name=filter_partition,json=filterPartition,proto3" json:"filter_partition,omitempty"`
	FilterAccount   string     `protobuf:"bytes,4,opt,name=filter_account,json=filterAccount,proto3" json:"filter_account,omitempty"`
	FilterState     TaskStatus `protobuf:"varint,5,opt,name=filter_state,json=filterState,proto3,enum=crane.grpc.TaskStatus" json:"filter_state,omitempty"`
	FilterTaskName  string     `protobuf:"bytes,6,opt,name=filter_task_name,json=filterTaskName,proto3" json:"filter_task_name,omitempty"`
	FilterNodes     []string   `protobuf:"bytes,7,rep,name=filter_nodes,json=filterNodes,proto3" json:"filter_nodes,omitempty"`
	FilterUsername  string     `protobuf:"bytes,8,opt,name=filter_username,json=filterUsername,proto3" json:"filter_username,omitempty"`
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_Crane_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{24}
}

func (x *CancelTaskRequest) GetOperatorUid() uint32 {
	if x != nil {
		return x.OperatorUid
	}
	return 0
}

func (x *CancelTaskRequest) GetFilterTaskIds() []uint32 {
	if x != nil {
		return x.FilterTaskIds
	}
	return nil
}

func (x *CancelTaskRequest) GetFilterPartition() string {
	if x != nil {
		return x.FilterPartition
	}
	return ""
}

func (x *CancelTaskRequest) GetFilterAccount() string {
	if x != nil {
		return x.FilterAccount
	}
	return ""
}

func (x *CancelTaskRequest) GetFilterState() TaskStatus {
	if x != nil {
		return x.FilterState
	}
	return TaskStatus_Pending
}

func (x *CancelTaskRequest) GetFilterTaskName() string {
	if x != nil {
		return x.FilterTaskName
	}
	return ""
}

func (x *CancelTaskRequest) GetFilterNodes() []string {
	if x != nil {
		return x.FilterNodes
	}
	return nil
}

func (x *CancelTaskRequest) GetFilterUsername() string {
	if x != nil {
		return x.FilterUsername
	}
	return ""
}

type CancelTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CancelledTasks      []uint32 `protobuf:"varint,2,rep,packed,name=cancelled_tasks,json=cancelledTasks,proto3" json:"cancelled_tasks,omitempty"`
	NotCancelledTasks   []uint32 `protobuf:"varint,3,rep,packed,name=not_cancelled_tasks,json=notCancelledTasks,proto3" json:"not_cancelled_tasks,omitempty"`
	NotCancelledReasons []string `protobuf:"bytes,4,rep,name=not_cancelled_reasons,json=notCancelledReasons,proto3" json:"not_cancelled_reasons,omitempty"`
}

func (x *CancelTaskReply) Reset() {
	*x = CancelTaskReply{}
	mi := &file_Crane_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskReply) ProtoMessage() {}

func (x *CancelTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskReply.ProtoReflect.Descriptor instead.
func (*CancelTaskReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{25}
}

func (x *CancelTaskReply) GetCancelledTasks() []uint32 {
	if x != nil {
		return x.CancelledTasks
	}
	return nil
}

func (x *CancelTaskReply) GetNotCancelledTasks() []uint32 {
	if x != nil {
		return x.NotCancelledTasks
	}
	return nil
}

func (x *CancelTaskReply) GetNotCancelledReasons() []string {
	if x != nil {
		return x.NotCancelledReasons
	}
	return nil
}

type QueryTaskIdFromPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *QueryTaskIdFromPortRequest) Reset() {
	*x = QueryTaskIdFromPortRequest{}
	mi := &file_Crane_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskIdFromPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskIdFromPortRequest) ProtoMessage() {}

func (x *QueryTaskIdFromPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskIdFromPortRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskIdFromPortRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{26}
}

func (x *QueryTaskIdFromPortRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type QueryTaskIdFromPortReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	TaskId uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *QueryTaskIdFromPortReply) Reset() {
	*x = QueryTaskIdFromPortReply{}
	mi := &file_Crane_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskIdFromPortReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskIdFromPortReply) ProtoMessage() {}

func (x *QueryTaskIdFromPortReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskIdFromPortReply.ProtoReflect.Descriptor instead.
func (*QueryTaskIdFromPortReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{27}
}

func (x *QueryTaskIdFromPortReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryTaskIdFromPortReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type QueryTaskIdFromPortForwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshRemotePort    uint32 `protobuf:"varint,1,opt,name=ssh_remote_port,json=sshRemotePort,proto3" json:"ssh_remote_port,omitempty"`
	SshRemoteAddress string `protobuf:"bytes,2,opt,name=ssh_remote_address,json=sshRemoteAddress,proto3" json:"ssh_remote_address,omitempty"`
	Uid              uint32 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *QueryTaskIdFromPortForwardRequest) Reset() {
	*x = QueryTaskIdFromPortForwardRequest{}
	mi := &file_Crane_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskIdFromPortForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskIdFromPortForwardRequest) ProtoMessage() {}

func (x *QueryTaskIdFromPortForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskIdFromPortForwardRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskIdFromPortForwardRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{28}
}

func (x *QueryTaskIdFromPortForwardRequest) GetSshRemotePort() uint32 {
	if x != nil {
		return x.SshRemotePort
	}
	return 0
}

func (x *QueryTaskIdFromPortForwardRequest) GetSshRemoteAddress() string {
	if x != nil {
		return x.SshRemoteAddress
	}
	return ""
}

func (x *QueryTaskIdFromPortForwardRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type QueryTaskIdFromPortForwardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	FromUser   bool   `protobuf:"varint,2,opt,name=from_user,json=fromUser,proto3" json:"from_user,omitempty"`
	TaskId     uint32 `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CgroupPath string `protobuf:"bytes,4,opt,name=cgroup_path,json=cgroupPath,proto3" json:"cgroup_path,omitempty"`
}

func (x *QueryTaskIdFromPortForwardReply) Reset() {
	*x = QueryTaskIdFromPortForwardReply{}
	mi := &file_Crane_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskIdFromPortForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskIdFromPortForwardReply) ProtoMessage() {}

func (x *QueryTaskIdFromPortForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskIdFromPortForwardReply.ProtoReflect.Descriptor instead.
func (*QueryTaskIdFromPortForwardReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{29}
}

func (x *QueryTaskIdFromPortForwardReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryTaskIdFromPortForwardReply) GetFromUser() bool {
	if x != nil {
		return x.FromUser
	}
	return false
}

func (x *QueryTaskIdFromPortForwardReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryTaskIdFromPortForwardReply) GetCgroupPath() string {
	if x != nil {
		return x.CgroupPath
	}
	return ""
}

type QueryCranedInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CranedName string `protobuf:"bytes,1,opt,name=craned_name,json=cranedName,proto3" json:"craned_name,omitempty"`
}

func (x *QueryCranedInfoRequest) Reset() {
	*x = QueryCranedInfoRequest{}
	mi := &file_Crane_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedInfoRequest) ProtoMessage() {}

func (x *QueryCranedInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryCranedInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{30}
}

func (x *QueryCranedInfoRequest) GetCranedName() string {
	if x != nil {
		return x.CranedName
	}
	return ""
}

type QueryCranedInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CranedInfoList []*CranedInfo `protobuf:"bytes,1,rep,name=craned_info_list,json=cranedInfoList,proto3" json:"craned_info_list,omitempty"`
}

func (x *QueryCranedInfoReply) Reset() {
	*x = QueryCranedInfoReply{}
	mi := &file_Crane_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedInfoReply) ProtoMessage() {}

func (x *QueryCranedInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedInfoReply.ProtoReflect.Descriptor instead.
func (*QueryCranedInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{31}
}

func (x *QueryCranedInfoReply) GetCranedInfoList() []*CranedInfo {
	if x != nil {
		return x.CranedInfoList
	}
	return nil
}

type QueryPartitionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionName string `protobuf:"bytes,1,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`
}

func (x *QueryPartitionInfoRequest) Reset() {
	*x = QueryPartitionInfoRequest{}
	mi := &file_Crane_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPartitionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPartitionInfoRequest) ProtoMessage() {}

func (x *QueryPartitionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPartitionInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryPartitionInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{32}
}

func (x *QueryPartitionInfoRequest) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

type QueryPartitionInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionInfo []*PartitionInfo `protobuf:"bytes,1,rep,name=partition_info,json=partitionInfo,proto3" json:"partition_info,omitempty"`
}

func (x *QueryPartitionInfoReply) Reset() {
	*x = QueryPartitionInfoReply{}
	mi := &file_Crane_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPartitionInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPartitionInfoReply) ProtoMessage() {}

func (x *QueryPartitionInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPartitionInfoReply.ProtoReflect.Descriptor instead.
func (*QueryPartitionInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{33}
}

func (x *QueryPartitionInfoReply) GetPartitionInfo() []*PartitionInfo {
	if x != nil {
		return x.PartitionInfo
	}
	return nil
}

type ModifyTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint32                             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TaskIds   []uint32                           `protobuf:"varint,2,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	Attribute ModifyTaskRequest_TargetAttributes `protobuf:"varint,3,opt,name=attribute,proto3,enum=crane.grpc.ModifyTaskRequest_TargetAttributes" json:"attribute,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ModifyTaskRequest_TimeLimitSeconds
	//	*ModifyTaskRequest_MandatedPriority
	//	*ModifyTaskRequest_HoldSeconds
	Value isModifyTaskRequest_Value `protobuf_oneof:"value"`
}

func (x *ModifyTaskRequest) Reset() {
	*x = ModifyTaskRequest{}
	mi := &file_Crane_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTaskRequest) ProtoMessage() {}

func (x *ModifyTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTaskRequest.ProtoReflect.Descriptor instead.
func (*ModifyTaskRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{34}
}

func (x *ModifyTaskRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyTaskRequest) GetTaskIds() []uint32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *ModifyTaskRequest) GetAttribute() ModifyTaskRequest_TargetAttributes {
	if x != nil {
		return x.Attribute
	}
	return ModifyTaskRequest_TimeLimit
}

func (m *ModifyTaskRequest) GetValue() isModifyTaskRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ModifyTaskRequest) GetTimeLimitSeconds() int64 {
	if x, ok := x.GetValue().(*ModifyTaskRequest_TimeLimitSeconds); ok {
		return x.TimeLimitSeconds
	}
	return 0
}

func (x *ModifyTaskRequest) GetMandatedPriority() float64 {
	if x, ok := x.GetValue().(*ModifyTaskRequest_MandatedPriority); ok {
		return x.MandatedPriority
	}
	return 0
}

func (x *ModifyTaskRequest) GetHoldSeconds() int64 {
	if x, ok := x.GetValue().(*ModifyTaskRequest_HoldSeconds); ok {
		return x.HoldSeconds
	}
	return 0
}

type isModifyTaskRequest_Value interface {
	isModifyTaskRequest_Value()
}

type ModifyTaskRequest_TimeLimitSeconds struct {
	TimeLimitSeconds int64 `protobuf:"varint,4,opt,name=time_limit_seconds,json=timeLimitSeconds,proto3,oneof"`
}

type ModifyTaskRequest_MandatedPriority struct {
	MandatedPriority float64 `protobuf:"fixed64,5,opt,name=mandated_priority,json=mandatedPriority,proto3,oneof"`
}

type ModifyTaskRequest_HoldSeconds struct {
	// If hold_seconds == 0, release the hold constraint timer if any exists;
	// If hold_seconds > 0, add or overwrite a hold constraint timer;
	// If hold_seconds == MaxInt64, add a hold constraint without timer.
	HoldSeconds int64 `protobuf:"varint,7,opt,name=hold_seconds,json=holdSeconds,proto3,oneof"`
}

func (*ModifyTaskRequest_TimeLimitSeconds) isModifyTaskRequest_Value() {}

func (*ModifyTaskRequest_MandatedPriority) isModifyTaskRequest_Value() {}

func (*ModifyTaskRequest_HoldSeconds) isModifyTaskRequest_Value() {}

type ModifyTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedTasks      []uint32 `protobuf:"varint,2,rep,packed,name=modified_tasks,json=modifiedTasks,proto3" json:"modified_tasks,omitempty"`
	NotModifiedTasks   []uint32 `protobuf:"varint,3,rep,packed,name=not_modified_tasks,json=notModifiedTasks,proto3" json:"not_modified_tasks,omitempty"`
	NotModifiedReasons []string `protobuf:"bytes,4,rep,name=not_modified_reasons,json=notModifiedReasons,proto3" json:"not_modified_reasons,omitempty"`
}

func (x *ModifyTaskReply) Reset() {
	*x = ModifyTaskReply{}
	mi := &file_Crane_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTaskReply) ProtoMessage() {}

func (x *ModifyTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTaskReply.ProtoReflect.Descriptor instead.
func (*ModifyTaskReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{35}
}

func (x *ModifyTaskReply) GetModifiedTasks() []uint32 {
	if x != nil {
		return x.ModifiedTasks
	}
	return nil
}

func (x *ModifyTaskReply) GetNotModifiedTasks() []uint32 {
	if x != nil {
		return x.NotModifiedTasks
	}
	return nil
}

func (x *ModifyTaskReply) GetNotModifiedReasons() []string {
	if x != nil {
		return x.NotModifiedReasons
	}
	return nil
}

type ModifyCranedStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint32             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CranedIds []string           `protobuf:"bytes,2,rep,name=craned_ids,json=cranedIds,proto3" json:"craned_ids,omitempty"`
	NewState  CranedControlState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=crane.grpc.CranedControlState" json:"new_state,omitempty"`
	Reason    string             `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ModifyCranedStateRequest) Reset() {
	*x = ModifyCranedStateRequest{}
	mi := &file_Crane_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyCranedStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCranedStateRequest) ProtoMessage() {}

func (x *ModifyCranedStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCranedStateRequest.ProtoReflect.Descriptor instead.
func (*ModifyCranedStateRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{36}
}

func (x *ModifyCranedStateRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyCranedStateRequest) GetCranedIds() []string {
	if x != nil {
		return x.CranedIds
	}
	return nil
}

func (x *ModifyCranedStateRequest) GetNewState() CranedControlState {
	if x != nil {
		return x.NewState
	}
	return CranedControlState_CRANE_NONE
}

func (x *ModifyCranedStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ModifyCranedStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedNodes      []string `protobuf:"bytes,2,rep,name=modified_nodes,json=modifiedNodes,proto3" json:"modified_nodes,omitempty"`
	NotModifiedNodes   []string `protobuf:"bytes,3,rep,name=not_modified_nodes,json=notModifiedNodes,proto3" json:"not_modified_nodes,omitempty"`
	NotModifiedReasons []string `protobuf:"bytes,4,rep,name=not_modified_reasons,json=notModifiedReasons,proto3" json:"not_modified_reasons,omitempty"`
}

func (x *ModifyCranedStateReply) Reset() {
	*x = ModifyCranedStateReply{}
	mi := &file_Crane_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyCranedStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCranedStateReply) ProtoMessage() {}

func (x *ModifyCranedStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCranedStateReply.ProtoReflect.Descriptor instead.
func (*ModifyCranedStateReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{37}
}

func (x *ModifyCranedStateReply) GetModifiedNodes() []string {
	if x != nil {
		return x.ModifiedNodes
	}
	return nil
}

func (x *ModifyCranedStateReply) GetNotModifiedNodes() []string {
	if x != nil {
		return x.NotModifiedNodes
	}
	return nil
}

func (x *ModifyCranedStateReply) GetNotModifiedReasons() []string {
	if x != nil {
		return x.NotModifiedReasons
	}
	return nil
}

type AddAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint32       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Account *AccountInfo `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AddAccountRequest) Reset() {
	*x = AddAccountRequest{}
	mi := &file_Crane_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountRequest) ProtoMessage() {}

func (x *AddAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountRequest.ProtoReflect.Descriptor instead.
func (*AddAccountRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{38}
}

func (x *AddAccountRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddAccountRequest) GetAccount() *AccountInfo {
	if x != nil {
		return x.Account
	}
	return nil
}

type AddAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *AddAccountReply) Reset() {
	*x = AddAccountReply{}
	mi := &file_Crane_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountReply) ProtoMessage() {}

func (x *AddAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountReply.ProtoReflect.Descriptor instead.
func (*AddAccountReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{39}
}

func (x *AddAccountReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddAccountReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	User *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	mi := &file_Crane_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{40}
}

func (x *AddUserRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddUserRequest) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type AddUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *AddUserReply) Reset() {
	*x = AddUserReply{}
	mi := &file_Crane_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserReply) ProtoMessage() {}

func (x *AddUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserReply.ProtoReflect.Descriptor instead.
func (*AddUserReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{41}
}

func (x *AddUserReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddUserReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type AddQosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Qos *QosInfo `protobuf:"bytes,2,opt,name=qos,proto3" json:"qos,omitempty"`
}

func (x *AddQosRequest) Reset() {
	*x = AddQosRequest{}
	mi := &file_Crane_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddQosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQosRequest) ProtoMessage() {}

func (x *AddQosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQosRequest.ProtoReflect.Descriptor instead.
func (*AddQosRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{42}
}

func (x *AddQosRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddQosRequest) GetQos() *QosInfo {
	if x != nil {
		return x.Qos
	}
	return nil
}

type AddQosReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *AddQosReply) Reset() {
	*x = AddQosReply{}
	mi := &file_Crane_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddQosReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQosReply) ProtoMessage() {}

func (x *AddQosReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQosReply.ProtoReflect.Descriptor instead.
func (*AddQosReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{43}
}

func (x *AddQosReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddQosReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	mi := &file_Crane_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteAccountRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeleteAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *DeleteAccountReply) Reset() {
	*x = DeleteAccountReply{}
	mi := &file_Crane_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountReply) ProtoMessage() {}

func (x *DeleteAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountReply.ProtoReflect.Descriptor instead.
func (*DeleteAccountReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteAccountReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DeleteAccountReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	mi := &file_Crane_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteUserRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeleteUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteUserRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type DeleteUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *DeleteUserReply) Reset() {
	*x = DeleteUserReply{}
	mi := &file_Crane_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserReply) ProtoMessage() {}

func (x *DeleteUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserReply.ProtoReflect.Descriptor instead.
func (*DeleteUserReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteUserReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DeleteUserReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type DeleteQosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteQosRequest) Reset() {
	*x = DeleteQosRequest{}
	mi := &file_Crane_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQosRequest) ProtoMessage() {}

func (x *DeleteQosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQosRequest.ProtoReflect.Descriptor instead.
func (*DeleteQosRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteQosRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeleteQosRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteQosReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *DeleteQosReply) Reset() {
	*x = DeleteQosReply{}
	mi := &file_Crane_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQosReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQosReply) ProtoMessage() {}

func (x *DeleteQosReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQosReply.ProtoReflect.Descriptor instead.
func (*DeleteQosReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteQosReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DeleteQosReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type ModifyAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ModifyField ModifyField   `protobuf:"varint,2,opt,name=modify_field,json=modifyField,proto3,enum=crane.grpc.ModifyField" json:"modify_field,omitempty"` //modify item field
	Value       string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                             //new value
	Name        string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type        OperationType `protobuf:"varint,5,opt,name=type,proto3,enum=crane.grpc.OperationType" json:"type,omitempty"`
	Force       bool          `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *ModifyAccountRequest) Reset() {
	*x = ModifyAccountRequest{}
	mi := &file_Crane_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAccountRequest) ProtoMessage() {}

func (x *ModifyAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAccountRequest.ProtoReflect.Descriptor instead.
func (*ModifyAccountRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{50}
}

func (x *ModifyAccountRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyAccountRequest) GetModifyField() ModifyField {
	if x != nil {
		return x.ModifyField
	}
	return ModifyField_Partition
}

func (x *ModifyAccountRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModifyAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyAccountRequest) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_Overwrite
}

func (x *ModifyAccountRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ModifyAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *ModifyAccountReply) Reset() {
	*x = ModifyAccountReply{}
	mi := &file_Crane_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAccountReply) ProtoMessage() {}

func (x *ModifyAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAccountReply.ProtoReflect.Descriptor instead.
func (*ModifyAccountReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{51}
}

func (x *ModifyAccountReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ModifyAccountReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type ModifyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ModifyField ModifyField   `protobuf:"varint,2,opt,name=modify_field,json=modifyField,proto3,enum=crane.grpc.ModifyField" json:"modify_field,omitempty"` //modify item field
	Value       string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                             //new value
	Name        string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Partition   string        `protobuf:"bytes,5,opt,name=partition,proto3" json:"partition,omitempty"`
	Type        OperationType `protobuf:"varint,6,opt,name=type,proto3,enum=crane.grpc.OperationType" json:"type,omitempty"`
	Account     string        `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty"`
	Force       bool          `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *ModifyUserRequest) Reset() {
	*x = ModifyUserRequest{}
	mi := &file_Crane_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserRequest) ProtoMessage() {}

func (x *ModifyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserRequest.ProtoReflect.Descriptor instead.
func (*ModifyUserRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{52}
}

func (x *ModifyUserRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyUserRequest) GetModifyField() ModifyField {
	if x != nil {
		return x.ModifyField
	}
	return ModifyField_Partition
}

func (x *ModifyUserRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModifyUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyUserRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *ModifyUserRequest) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_Overwrite
}

func (x *ModifyUserRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ModifyUserRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ModifyUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *ModifyUserReply) Reset() {
	*x = ModifyUserReply{}
	mi := &file_Crane_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserReply) ProtoMessage() {}

func (x *ModifyUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserReply.ProtoReflect.Descriptor instead.
func (*ModifyUserReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{53}
}

func (x *ModifyUserReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ModifyUserReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type ModifyQosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ModifyField ModifyField `protobuf:"varint,2,opt,name=modify_field,json=modifyField,proto3,enum=crane.grpc.ModifyField" json:"modify_field,omitempty"` //modify item field
	Value       string      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                             //new value
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModifyQosRequest) Reset() {
	*x = ModifyQosRequest{}
	mi := &file_Crane_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyQosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyQosRequest) ProtoMessage() {}

func (x *ModifyQosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyQosRequest.ProtoReflect.Descriptor instead.
func (*ModifyQosRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{54}
}

func (x *ModifyQosRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyQosRequest) GetModifyField() ModifyField {
	if x != nil {
		return x.ModifyField
	}
	return ModifyField_Partition
}

func (x *ModifyQosRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModifyQosRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ModifyQosReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *ModifyQosReply) Reset() {
	*x = ModifyQosReply{}
	mi := &file_Crane_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyQosReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyQosReply) ProtoMessage() {}

func (x *ModifyQosReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyQosReply.ProtoReflect.Descriptor instead.
func (*ModifyQosReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{55}
}

func (x *ModifyQosReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ModifyQosReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type QueryAccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QueryAccountInfoRequest) Reset() {
	*x = QueryAccountInfoRequest{}
	mi := &file_Crane_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountInfoRequest) ProtoMessage() {}

func (x *QueryAccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryAccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{56}
}

func (x *QueryAccountInfoRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryAccountInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryAccountInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok          bool           `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason      ErrCode        `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
	AccountList []*AccountInfo `protobuf:"bytes,3,rep,name=account_list,json=accountList,proto3" json:"account_list,omitempty"`
}

func (x *QueryAccountInfoReply) Reset() {
	*x = QueryAccountInfoReply{}
	mi := &file_Crane_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountInfoReply) ProtoMessage() {}

func (x *QueryAccountInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountInfoReply.ProtoReflect.Descriptor instead.
func (*QueryAccountInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{57}
}

func (x *QueryAccountInfoReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryAccountInfoReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

func (x *QueryAccountInfoReply) GetAccountList() []*AccountInfo {
	if x != nil {
		return x.AccountList
	}
	return nil
}

type QueryUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *QueryUserInfoRequest) Reset() {
	*x = QueryUserInfoRequest{}
	mi := &file_Crane_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoRequest) ProtoMessage() {}

func (x *QueryUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{58}
}

func (x *QueryUserInfoRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryUserInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryUserInfoRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type QueryUserInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason   ErrCode     `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
	UserList []*UserInfo `protobuf:"bytes,3,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`
}

func (x *QueryUserInfoReply) Reset() {
	*x = QueryUserInfoReply{}
	mi := &file_Crane_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUserInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoReply) ProtoMessage() {}

func (x *QueryUserInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoReply.ProtoReflect.Descriptor instead.
func (*QueryUserInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{59}
}

func (x *QueryUserInfoReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryUserInfoReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

func (x *QueryUserInfoReply) GetUserList() []*UserInfo {
	if x != nil {
		return x.UserList
	}
	return nil
}

type QueryQosInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QueryQosInfoRequest) Reset() {
	*x = QueryQosInfoRequest{}
	mi := &file_Crane_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryQosInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryQosInfoRequest) ProtoMessage() {}

func (x *QueryQosInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryQosInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryQosInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{60}
}

func (x *QueryQosInfoRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryQosInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryQosInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool       `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason  ErrCode    `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
	QosList []*QosInfo `protobuf:"bytes,5,rep,name=qos_list,json=qosList,proto3" json:"qos_list,omitempty"`
}

func (x *QueryQosInfoReply) Reset() {
	*x = QueryQosInfoReply{}
	mi := &file_Crane_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryQosInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryQosInfoReply) ProtoMessage() {}

func (x *QueryQosInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryQosInfoReply.ProtoReflect.Descriptor instead.
func (*QueryQosInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{61}
}

func (x *QueryQosInfoReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryQosInfoReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

func (x *QueryQosInfoReply) GetQosList() []*QosInfo {
	if x != nil {
		return x.QosList
	}
	return nil
}

type BlockAccountOrUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Block      bool       `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	EntityType EntityType `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3,enum=crane.grpc.EntityType" json:"entity_type,omitempty"`
	Name       string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Account    string     `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *BlockAccountOrUserRequest) Reset() {
	*x = BlockAccountOrUserRequest{}
	mi := &file_Crane_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountOrUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountOrUserRequest) ProtoMessage() {}

func (x *BlockAccountOrUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountOrUserRequest.ProtoReflect.Descriptor instead.
func (*BlockAccountOrUserRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{62}
}

func (x *BlockAccountOrUserRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlockAccountOrUserRequest) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

func (x *BlockAccountOrUserRequest) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_Account
}

func (x *BlockAccountOrUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockAccountOrUserRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type BlockAccountOrUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason ErrCode `protobuf:"varint,2,opt,name=reason,proto3,enum=crane.grpc.ErrCode" json:"reason,omitempty"`
}

func (x *BlockAccountOrUserReply) Reset() {
	*x = BlockAccountOrUserReply{}
	mi := &file_Crane_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountOrUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountOrUserReply) ProtoMessage() {}

func (x *BlockAccountOrUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountOrUserReply.ProtoReflect.Descriptor instead.
func (*BlockAccountOrUserReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{63}
}

func (x *BlockAccountOrUserReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *BlockAccountOrUserReply) GetReason() ErrCode {
	if x != nil {
		return x.Reason
	}
	return ErrCode_SUCCESS
}

type MigrateSshProcToCgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    int32  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	TaskId uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *MigrateSshProcToCgroupRequest) Reset() {
	*x = MigrateSshProcToCgroupRequest{}
	mi := &file_Crane_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateSshProcToCgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateSshProcToCgroupRequest) ProtoMessage() {}

func (x *MigrateSshProcToCgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateSshProcToCgroupRequest.ProtoReflect.Descriptor instead.
func (*MigrateSshProcToCgroupRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{64}
}

func (x *MigrateSshProcToCgroupRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MigrateSshProcToCgroupRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type MigrateSshProcToCgroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *MigrateSshProcToCgroupReply) Reset() {
	*x = MigrateSshProcToCgroupReply{}
	mi := &file_Crane_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateSshProcToCgroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateSshProcToCgroupReply) ProtoMessage() {}

func (x *MigrateSshProcToCgroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateSshProcToCgroupReply.ProtoReflect.Descriptor instead.
func (*MigrateSshProcToCgroupReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{65}
}

func (x *MigrateSshProcToCgroupReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type QueryTaskEnvVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *QueryTaskEnvVariablesRequest) Reset() {
	*x = QueryTaskEnvVariablesRequest{}
	mi := &file_Crane_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskEnvVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskEnvVariablesRequest) ProtoMessage() {}

func (x *QueryTaskEnvVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskEnvVariablesRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskEnvVariablesRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{66}
}

func (x *QueryTaskEnvVariablesRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type QueryTaskEnvVariablesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	EnvMap map[string]string `protobuf:"bytes,2,rep,name=env_map,json=envMap,proto3" json:"env_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTaskEnvVariablesReply) Reset() {
	*x = QueryTaskEnvVariablesReply{}
	mi := &file_Crane_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskEnvVariablesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskEnvVariablesReply) ProtoMessage() {}

func (x *QueryTaskEnvVariablesReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskEnvVariablesReply.ProtoReflect.Descriptor instead.
func (*QueryTaskEnvVariablesReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{67}
}

func (x *QueryTaskEnvVariablesReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryTaskEnvVariablesReply) GetEnvMap() map[string]string {
	if x != nil {
		return x.EnvMap
	}
	return nil
}

type QueryTaskEnvVariablesForwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ExecutionNode string `protobuf:"bytes,2,opt,name=execution_node,json=executionNode,proto3" json:"execution_node,omitempty"`
}

func (x *QueryTaskEnvVariablesForwardRequest) Reset() {
	*x = QueryTaskEnvVariablesForwardRequest{}
	mi := &file_Crane_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskEnvVariablesForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskEnvVariablesForwardRequest) ProtoMessage() {}

func (x *QueryTaskEnvVariablesForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskEnvVariablesForwardRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskEnvVariablesForwardRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{68}
}

func (x *QueryTaskEnvVariablesForwardRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryTaskEnvVariablesForwardRequest) GetExecutionNode() string {
	if x != nil {
		return x.ExecutionNode
	}
	return ""
}

type QueryTaskEnvVariablesForwardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	EnvMap map[string]string `protobuf:"bytes,2,rep,name=env_map,json=envMap,proto3" json:"env_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTaskEnvVariablesForwardReply) Reset() {
	*x = QueryTaskEnvVariablesForwardReply{}
	mi := &file_Crane_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskEnvVariablesForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskEnvVariablesForwardReply) ProtoMessage() {}

func (x *QueryTaskEnvVariablesForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskEnvVariablesForwardReply.ProtoReflect.Descriptor instead.
func (*QueryTaskEnvVariablesForwardReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{69}
}

func (x *QueryTaskEnvVariablesForwardReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryTaskEnvVariablesForwardReply) GetEnvMap() map[string]string {
	if x != nil {
		return x.EnvMap
	}
	return nil
}

type QueryClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterPartitions           []string              `protobuf:"bytes,1,rep,name=filter_partitions,json=filterPartitions,proto3" json:"filter_partitions,omitempty"`
	FilterNodes                []string              `protobuf:"bytes,2,rep,name=filter_nodes,json=filterNodes,proto3" json:"filter_nodes,omitempty"`
	FilterCranedResourceStates []CranedResourceState `protobuf:"varint,3,rep,packed,name=filter_craned_resource_states,json=filterCranedResourceStates,proto3,enum=crane.grpc.CranedResourceState" json:"filter_craned_resource_states,omitempty"`
	FilterCranedControlStates  []CranedControlState  `protobuf:"varint,4,rep,packed,name=filter_craned_control_states,json=filterCranedControlStates,proto3,enum=crane.grpc.CranedControlState" json:"filter_craned_control_states,omitempty"`
}

func (x *QueryClusterInfoRequest) Reset() {
	*x = QueryClusterInfoRequest{}
	mi := &file_Crane_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterInfoRequest) ProtoMessage() {}

func (x *QueryClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{70}
}

func (x *QueryClusterInfoRequest) GetFilterPartitions() []string {
	if x != nil {
		return x.FilterPartitions
	}
	return nil
}

func (x *QueryClusterInfoRequest) GetFilterNodes() []string {
	if x != nil {
		return x.FilterNodes
	}
	return nil
}

func (x *QueryClusterInfoRequest) GetFilterCranedResourceStates() []CranedResourceState {
	if x != nil {
		return x.FilterCranedResourceStates
	}
	return nil
}

func (x *QueryClusterInfoRequest) GetFilterCranedControlStates() []CranedControlState {
	if x != nil {
		return x.FilterCranedControlStates
	}
	return nil
}

type QueryClusterInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool                    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Partitions []*TrimmedPartitionInfo `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *QueryClusterInfoReply) Reset() {
	*x = QueryClusterInfoReply{}
	mi := &file_Crane_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterInfoReply) ProtoMessage() {}

func (x *QueryClusterInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterInfoReply.ProtoReflect.Descriptor instead.
func (*QueryClusterInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{71}
}

func (x *QueryClusterInfoReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryClusterInfoReply) GetPartitions() []*TrimmedPartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type QueryTasksInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterTaskIds               []uint32      `protobuf:"varint,1,rep,packed,name=filter_task_ids,json=filterTaskIds,proto3" json:"filter_task_ids,omitempty"`
	FilterPartitions            []string      `protobuf:"bytes,2,rep,name=filter_partitions,json=filterPartitions,proto3" json:"filter_partitions,omitempty"`
	NumLimit                    uint32        `protobuf:"varint,3,opt,name=num_limit,json=numLimit,proto3" json:"num_limit,omitempty"`
	FilterTaskNames             []string      `protobuf:"bytes,4,rep,name=filter_task_names,json=filterTaskNames,proto3" json:"filter_task_names,omitempty"`
	FilterQos                   []string      `protobuf:"bytes,5,rep,name=filter_qos,json=filterQos,proto3" json:"filter_qos,omitempty"`
	FilterTaskStates            []TaskStatus  `protobuf:"varint,6,rep,packed,name=filter_task_states,json=filterTaskStates,proto3,enum=crane.grpc.TaskStatus" json:"filter_task_states,omitempty"`
	FilterUsers                 []string      `protobuf:"bytes,7,rep,name=filter_users,json=filterUsers,proto3" json:"filter_users,omitempty"`
	FilterAccounts              []string      `protobuf:"bytes,8,rep,name=filter_accounts,json=filterAccounts,proto3" json:"filter_accounts,omitempty"`
	FilterSubmitTimeInterval    *TimeInterval `protobuf:"bytes,9,opt,name=filter_submit_time_interval,json=filterSubmitTimeInterval,proto3" json:"filter_submit_time_interval,omitempty"`
	FilterStartTimeInterval     *TimeInterval `protobuf:"bytes,10,opt,name=filter_start_time_interval,json=filterStartTimeInterval,proto3" json:"filter_start_time_interval,omitempty"`
	FilterEndTimeInterval       *TimeInterval `protobuf:"bytes,11,opt,name=filter_end_time_interval,json=filterEndTimeInterval,proto3" json:"filter_end_time_interval,omitempty"`
	OptionIncludeCompletedTasks bool          `protobuf:"varint,15,opt,name=option_include_completed_tasks,json=optionIncludeCompletedTasks,proto3" json:"option_include_completed_tasks,omitempty"`
}

func (x *QueryTasksInfoRequest) Reset() {
	*x = QueryTasksInfoRequest{}
	mi := &file_Crane_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksInfoRequest) ProtoMessage() {}

func (x *QueryTasksInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryTasksInfoRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{72}
}

func (x *QueryTasksInfoRequest) GetFilterTaskIds() []uint32 {
	if x != nil {
		return x.FilterTaskIds
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterPartitions() []string {
	if x != nil {
		return x.FilterPartitions
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetNumLimit() uint32 {
	if x != nil {
		return x.NumLimit
	}
	return 0
}

func (x *QueryTasksInfoRequest) GetFilterTaskNames() []string {
	if x != nil {
		return x.FilterTaskNames
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterQos() []string {
	if x != nil {
		return x.FilterQos
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterTaskStates() []TaskStatus {
	if x != nil {
		return x.FilterTaskStates
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterUsers() []string {
	if x != nil {
		return x.FilterUsers
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterAccounts() []string {
	if x != nil {
		return x.FilterAccounts
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterSubmitTimeInterval() *TimeInterval {
	if x != nil {
		return x.FilterSubmitTimeInterval
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterStartTimeInterval() *TimeInterval {
	if x != nil {
		return x.FilterStartTimeInterval
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetFilterEndTimeInterval() *TimeInterval {
	if x != nil {
		return x.FilterEndTimeInterval
	}
	return nil
}

func (x *QueryTasksInfoRequest) GetOptionIncludeCompletedTasks() bool {
	if x != nil {
		return x.OptionIncludeCompletedTasks
	}
	return false
}

type QueryTasksInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	TaskInfoList []*TaskInfo `protobuf:"bytes,2,rep,name=task_info_list,json=taskInfoList,proto3" json:"task_info_list,omitempty"`
}

func (x *QueryTasksInfoReply) Reset() {
	*x = QueryTasksInfoReply{}
	mi := &file_Crane_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksInfoReply) ProtoMessage() {}

func (x *QueryTasksInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksInfoReply.ProtoReflect.Descriptor instead.
func (*QueryTasksInfoReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{73}
}

func (x *QueryTasksInfoReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryTasksInfoReply) GetTaskInfoList() []*TaskInfo {
	if x != nil {
		return x.TaskInfoList
	}
	return nil
}

type StreamCallocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCallocRequest_CallocRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCallocRequest_CallocRequestType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCallocRequest_PayloadTaskReq
	//	*StreamCallocRequest_PayloadTaskCompleteReq
	Payload isStreamCallocRequest_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCallocRequest) Reset() {
	*x = StreamCallocRequest{}
	mi := &file_Crane_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCallocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCallocRequest) ProtoMessage() {}

func (x *StreamCallocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCallocRequest.ProtoReflect.Descriptor instead.
func (*StreamCallocRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{74}
}

func (x *StreamCallocRequest) GetType() StreamCallocRequest_CallocRequestType {
	if x != nil {
		return x.Type
	}
	return StreamCallocRequest_TASK_REQUEST
}

func (m *StreamCallocRequest) GetPayload() isStreamCallocRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCallocRequest) GetPayloadTaskReq() *StreamCallocRequest_TaskReq {
	if x, ok := x.GetPayload().(*StreamCallocRequest_PayloadTaskReq); ok {
		return x.PayloadTaskReq
	}
	return nil
}

func (x *StreamCallocRequest) GetPayloadTaskCompleteReq() *StreamCallocRequest_TaskCompleteReq {
	if x, ok := x.GetPayload().(*StreamCallocRequest_PayloadTaskCompleteReq); ok {
		return x.PayloadTaskCompleteReq
	}
	return nil
}

type isStreamCallocRequest_Payload interface {
	isStreamCallocRequest_Payload()
}

type StreamCallocRequest_PayloadTaskReq struct {
	PayloadTaskReq *StreamCallocRequest_TaskReq `protobuf:"bytes,2,opt,name=payload_task_req,json=payloadTaskReq,proto3,oneof"`
}

type StreamCallocRequest_PayloadTaskCompleteReq struct {
	PayloadTaskCompleteReq *StreamCallocRequest_TaskCompleteReq `protobuf:"bytes,3,opt,name=payload_task_complete_req,json=payloadTaskCompleteReq,proto3,oneof"`
}

func (*StreamCallocRequest_PayloadTaskReq) isStreamCallocRequest_Payload() {}

func (*StreamCallocRequest_PayloadTaskCompleteReq) isStreamCallocRequest_Payload() {}

type StreamCforedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCforedReply_CforedReplyType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCforedReply_CforedReplyType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCforedReply_PayloadTaskIdReply
	//	*StreamCforedReply_PayloadTaskAllocReply
	//	*StreamCforedReply_PayloadTaskCancelRequest
	//	*StreamCforedReply_PayloadTaskCompletionAckReply
	Payload isStreamCforedReply_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCforedReply) Reset() {
	*x = StreamCforedReply{}
	mi := &file_Crane_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedReply) ProtoMessage() {}

func (x *StreamCforedReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedReply.ProtoReflect.Descriptor instead.
func (*StreamCforedReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75}
}

func (x *StreamCforedReply) GetType() StreamCforedReply_CforedReplyType {
	if x != nil {
		return x.Type
	}
	return StreamCforedReply_TASK_ID_REPLY
}

func (m *StreamCforedReply) GetPayload() isStreamCforedReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCforedReply) GetPayloadTaskIdReply() *StreamCforedReply_TaskIdReply {
	if x, ok := x.GetPayload().(*StreamCforedReply_PayloadTaskIdReply); ok {
		return x.PayloadTaskIdReply
	}
	return nil
}

func (x *StreamCforedReply) GetPayloadTaskAllocReply() *StreamCforedReply_TaskResAllocatedReply {
	if x, ok := x.GetPayload().(*StreamCforedReply_PayloadTaskAllocReply); ok {
		return x.PayloadTaskAllocReply
	}
	return nil
}

func (x *StreamCforedReply) GetPayloadTaskCancelRequest() *StreamCforedReply_TaskCancelRequest {
	if x, ok := x.GetPayload().(*StreamCforedReply_PayloadTaskCancelRequest); ok {
		return x.PayloadTaskCancelRequest
	}
	return nil
}

func (x *StreamCforedReply) GetPayloadTaskCompletionAckReply() *StreamCforedReply_TaskCompletionAckReply {
	if x, ok := x.GetPayload().(*StreamCforedReply_PayloadTaskCompletionAckReply); ok {
		return x.PayloadTaskCompletionAckReply
	}
	return nil
}

type isStreamCforedReply_Payload interface {
	isStreamCforedReply_Payload()
}

type StreamCforedReply_PayloadTaskIdReply struct {
	PayloadTaskIdReply *StreamCforedReply_TaskIdReply `protobuf:"bytes,2,opt,name=payload_task_id_reply,json=payloadTaskIdReply,proto3,oneof"`
}

type StreamCforedReply_PayloadTaskAllocReply struct {
	PayloadTaskAllocReply *StreamCforedReply_TaskResAllocatedReply `protobuf:"bytes,3,opt,name=payload_task_alloc_reply,json=payloadTaskAllocReply,proto3,oneof"`
}

type StreamCforedReply_PayloadTaskCancelRequest struct {
	PayloadTaskCancelRequest *StreamCforedReply_TaskCancelRequest `protobuf:"bytes,4,opt,name=payload_task_cancel_request,json=payloadTaskCancelRequest,proto3,oneof"`
}

type StreamCforedReply_PayloadTaskCompletionAckReply struct {
	PayloadTaskCompletionAckReply *StreamCforedReply_TaskCompletionAckReply `protobuf:"bytes,5,opt,name=payload_task_completion_ack_reply,json=payloadTaskCompletionAckReply,proto3,oneof"`
}

func (*StreamCforedReply_PayloadTaskIdReply) isStreamCforedReply_Payload() {}

func (*StreamCforedReply_PayloadTaskAllocReply) isStreamCforedReply_Payload() {}

func (*StreamCforedReply_PayloadTaskCancelRequest) isStreamCforedReply_Payload() {}

func (*StreamCforedReply_PayloadTaskCompletionAckReply) isStreamCforedReply_Payload() {}

type StreamCforedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCforedRequest_CforedRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCforedRequest_CforedRequestType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCforedRequest_PayloadCforedReg
	//	*StreamCforedRequest_PayloadTaskReq
	//	*StreamCforedRequest_PayloadTaskCompleteReq
	//	*StreamCforedRequest_PayloadGracefulExitReq
	Payload isStreamCforedRequest_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCforedRequest) Reset() {
	*x = StreamCforedRequest{}
	mi := &file_Crane_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedRequest) ProtoMessage() {}

func (x *StreamCforedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedRequest.ProtoReflect.Descriptor instead.
func (*StreamCforedRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76}
}

func (x *StreamCforedRequest) GetType() StreamCforedRequest_CforedRequestType {
	if x != nil {
		return x.Type
	}
	return StreamCforedRequest_CFORED_REGISTRATION
}

func (m *StreamCforedRequest) GetPayload() isStreamCforedRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCforedRequest) GetPayloadCforedReg() *StreamCforedRequest_CforedReg {
	if x, ok := x.GetPayload().(*StreamCforedRequest_PayloadCforedReg); ok {
		return x.PayloadCforedReg
	}
	return nil
}

func (x *StreamCforedRequest) GetPayloadTaskReq() *StreamCforedRequest_TaskReq {
	if x, ok := x.GetPayload().(*StreamCforedRequest_PayloadTaskReq); ok {
		return x.PayloadTaskReq
	}
	return nil
}

func (x *StreamCforedRequest) GetPayloadTaskCompleteReq() *StreamCforedRequest_TaskCompleteReq {
	if x, ok := x.GetPayload().(*StreamCforedRequest_PayloadTaskCompleteReq); ok {
		return x.PayloadTaskCompleteReq
	}
	return nil
}

func (x *StreamCforedRequest) GetPayloadGracefulExitReq() *StreamCforedRequest_GracefulExitReq {
	if x, ok := x.GetPayload().(*StreamCforedRequest_PayloadGracefulExitReq); ok {
		return x.PayloadGracefulExitReq
	}
	return nil
}

type isStreamCforedRequest_Payload interface {
	isStreamCforedRequest_Payload()
}

type StreamCforedRequest_PayloadCforedReg struct {
	PayloadCforedReg *StreamCforedRequest_CforedReg `protobuf:"bytes,2,opt,name=payload_cfored_reg,json=payloadCforedReg,proto3,oneof"`
}

type StreamCforedRequest_PayloadTaskReq struct {
	PayloadTaskReq *StreamCforedRequest_TaskReq `protobuf:"bytes,3,opt,name=payload_task_req,json=payloadTaskReq,proto3,oneof"`
}

type StreamCforedRequest_PayloadTaskCompleteReq struct {
	PayloadTaskCompleteReq *StreamCforedRequest_TaskCompleteReq `protobuf:"bytes,4,opt,name=payload_task_complete_req,json=payloadTaskCompleteReq,proto3,oneof"`
}

type StreamCforedRequest_PayloadGracefulExitReq struct {
	PayloadGracefulExitReq *StreamCforedRequest_GracefulExitReq `protobuf:"bytes,5,opt,name=payload_graceful_exit_req,json=payloadGracefulExitReq,proto3,oneof"`
}

func (*StreamCforedRequest_PayloadCforedReg) isStreamCforedRequest_Payload() {}

func (*StreamCforedRequest_PayloadTaskReq) isStreamCforedRequest_Payload() {}

func (*StreamCforedRequest_PayloadTaskCompleteReq) isStreamCforedRequest_Payload() {}

func (*StreamCforedRequest_PayloadGracefulExitReq) isStreamCforedRequest_Payload() {}

type StreamCtldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCtldReply_CtldReplyType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCtldReply_CtldReplyType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCtldReply_PayloadCforedRegAck
	//	*StreamCtldReply_PayloadTaskResAllocReply
	//	*StreamCtldReply_PayloadTaskCancelRequest
	//	*StreamCtldReply_PayloadTaskCompletionAck
	//	*StreamCtldReply_PayloadTaskIdReply
	//	*StreamCtldReply_PayloadGracefulExitAck
	Payload isStreamCtldReply_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCtldReply) Reset() {
	*x = StreamCtldReply{}
	mi := &file_Crane_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply) ProtoMessage() {}

func (x *StreamCtldReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply.ProtoReflect.Descriptor instead.
func (*StreamCtldReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77}
}

func (x *StreamCtldReply) GetType() StreamCtldReply_CtldReplyType {
	if x != nil {
		return x.Type
	}
	return StreamCtldReply_TASK_ID_REPLY
}

func (m *StreamCtldReply) GetPayload() isStreamCtldReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadCforedRegAck() *StreamCtldReply_CforedRegistrationAck {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadCforedRegAck); ok {
		return x.PayloadCforedRegAck
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadTaskResAllocReply() *StreamCtldReply_TaskResAllocatedReply {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadTaskResAllocReply); ok {
		return x.PayloadTaskResAllocReply
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadTaskCancelRequest() *StreamCtldReply_TaskCancelRequest {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadTaskCancelRequest); ok {
		return x.PayloadTaskCancelRequest
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadTaskCompletionAck() *StreamCtldReply_TaskCompletionAckReply {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadTaskCompletionAck); ok {
		return x.PayloadTaskCompletionAck
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadTaskIdReply() *StreamCtldReply_TaskIdReply {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadTaskIdReply); ok {
		return x.PayloadTaskIdReply
	}
	return nil
}

func (x *StreamCtldReply) GetPayloadGracefulExitAck() *StreamCtldReply_CforedGracefulExitAck {
	if x, ok := x.GetPayload().(*StreamCtldReply_PayloadGracefulExitAck); ok {
		return x.PayloadGracefulExitAck
	}
	return nil
}

type isStreamCtldReply_Payload interface {
	isStreamCtldReply_Payload()
}

type StreamCtldReply_PayloadCforedRegAck struct {
	PayloadCforedRegAck *StreamCtldReply_CforedRegistrationAck `protobuf:"bytes,2,opt,name=payload_cfored_reg_ack,json=payloadCforedRegAck,proto3,oneof"`
}

type StreamCtldReply_PayloadTaskResAllocReply struct {
	PayloadTaskResAllocReply *StreamCtldReply_TaskResAllocatedReply `protobuf:"bytes,3,opt,name=payload_task_res_alloc_reply,json=payloadTaskResAllocReply,proto3,oneof"`
}

type StreamCtldReply_PayloadTaskCancelRequest struct {
	PayloadTaskCancelRequest *StreamCtldReply_TaskCancelRequest `protobuf:"bytes,4,opt,name=payload_task_cancel_request,json=payloadTaskCancelRequest,proto3,oneof"`
}

type StreamCtldReply_PayloadTaskCompletionAck struct {
	PayloadTaskCompletionAck *StreamCtldReply_TaskCompletionAckReply `protobuf:"bytes,5,opt,name=payload_task_completion_ack,json=payloadTaskCompletionAck,proto3,oneof"`
}

type StreamCtldReply_PayloadTaskIdReply struct {
	PayloadTaskIdReply *StreamCtldReply_TaskIdReply `protobuf:"bytes,6,opt,name=payload_task_id_reply,json=payloadTaskIdReply,proto3,oneof"`
}

type StreamCtldReply_PayloadGracefulExitAck struct {
	PayloadGracefulExitAck *StreamCtldReply_CforedGracefulExitAck `protobuf:"bytes,7,opt,name=payload_graceful_exit_ack,json=payloadGracefulExitAck,proto3,oneof"`
}

func (*StreamCtldReply_PayloadCforedRegAck) isStreamCtldReply_Payload() {}

func (*StreamCtldReply_PayloadTaskResAllocReply) isStreamCtldReply_Payload() {}

func (*StreamCtldReply_PayloadTaskCancelRequest) isStreamCtldReply_Payload() {}

func (*StreamCtldReply_PayloadTaskCompletionAck) isStreamCtldReply_Payload() {}

func (*StreamCtldReply_PayloadTaskIdReply) isStreamCtldReply_Payload() {}

func (*StreamCtldReply_PayloadGracefulExitAck) isStreamCtldReply_Payload() {}

type QueryCranedRemoteMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryCranedRemoteMetaRequest) Reset() {
	*x = QueryCranedRemoteMetaRequest{}
	mi := &file_Crane_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedRemoteMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedRemoteMetaRequest) ProtoMessage() {}

func (x *QueryCranedRemoteMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedRemoteMetaRequest.ProtoReflect.Descriptor instead.
func (*QueryCranedRemoteMetaRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{78}
}

type QueryCranedRemoteMetaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok               bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	CranedRemoteMeta *CranedRemoteMeta `protobuf:"bytes,2,opt,name=craned_remote_meta,json=cranedRemoteMeta,proto3" json:"craned_remote_meta,omitempty"`
}

func (x *QueryCranedRemoteMetaReply) Reset() {
	*x = QueryCranedRemoteMetaReply{}
	mi := &file_Crane_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCranedRemoteMetaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCranedRemoteMetaReply) ProtoMessage() {}

func (x *QueryCranedRemoteMetaReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCranedRemoteMetaReply.ProtoReflect.Descriptor instead.
func (*QueryCranedRemoteMetaReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{79}
}

func (x *QueryCranedRemoteMetaReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *QueryCranedRemoteMetaReply) GetCranedRemoteMeta() *CranedRemoteMeta {
	if x != nil {
		return x.CranedRemoteMeta
	}
	return nil
}

type StreamCrunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCrunRequest_CrunRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCrunRequest_CrunRequestType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCrunRequest_PayloadTaskReq
	//	*StreamCrunRequest_PayloadTaskCompleteReq
	//	*StreamCrunRequest_PayloadTaskIoForwardReq
	Payload isStreamCrunRequest_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCrunRequest) Reset() {
	*x = StreamCrunRequest{}
	mi := &file_Crane_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCrunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCrunRequest) ProtoMessage() {}

func (x *StreamCrunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCrunRequest.ProtoReflect.Descriptor instead.
func (*StreamCrunRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{80}
}

func (x *StreamCrunRequest) GetType() StreamCrunRequest_CrunRequestType {
	if x != nil {
		return x.Type
	}
	return StreamCrunRequest_TASK_REQUEST
}

func (m *StreamCrunRequest) GetPayload() isStreamCrunRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCrunRequest) GetPayloadTaskReq() *StreamCrunRequest_TaskReq {
	if x, ok := x.GetPayload().(*StreamCrunRequest_PayloadTaskReq); ok {
		return x.PayloadTaskReq
	}
	return nil
}

func (x *StreamCrunRequest) GetPayloadTaskCompleteReq() *StreamCrunRequest_TaskCompleteReq {
	if x, ok := x.GetPayload().(*StreamCrunRequest_PayloadTaskCompleteReq); ok {
		return x.PayloadTaskCompleteReq
	}
	return nil
}

func (x *StreamCrunRequest) GetPayloadTaskIoForwardReq() *StreamCrunRequest_TaskIOForwardReq {
	if x, ok := x.GetPayload().(*StreamCrunRequest_PayloadTaskIoForwardReq); ok {
		return x.PayloadTaskIoForwardReq
	}
	return nil
}

type isStreamCrunRequest_Payload interface {
	isStreamCrunRequest_Payload()
}

type StreamCrunRequest_PayloadTaskReq struct {
	PayloadTaskReq *StreamCrunRequest_TaskReq `protobuf:"bytes,2,opt,name=payload_task_req,json=payloadTaskReq,proto3,oneof"`
}

type StreamCrunRequest_PayloadTaskCompleteReq struct {
	PayloadTaskCompleteReq *StreamCrunRequest_TaskCompleteReq `protobuf:"bytes,3,opt,name=payload_task_complete_req,json=payloadTaskCompleteReq,proto3,oneof"`
}

type StreamCrunRequest_PayloadTaskIoForwardReq struct {
	PayloadTaskIoForwardReq *StreamCrunRequest_TaskIOForwardReq `protobuf:"bytes,4,opt,name=payload_task_io_forward_req,json=payloadTaskIoForwardReq,proto3,oneof"`
}

func (*StreamCrunRequest_PayloadTaskReq) isStreamCrunRequest_Payload() {}

func (*StreamCrunRequest_PayloadTaskCompleteReq) isStreamCrunRequest_Payload() {}

func (*StreamCrunRequest_PayloadTaskIoForwardReq) isStreamCrunRequest_Payload() {}

type StreamCforedCrunReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCforedCrunReply_CforedCrunReplyType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCforedCrunReply_CforedCrunReplyType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCforedCrunReply_PayloadTaskIdReply
	//	*StreamCforedCrunReply_PayloadTaskAllocReply
	//	*StreamCforedCrunReply_PayloadTaskCancelRequest
	//	*StreamCforedCrunReply_PayloadTaskCompletionAckReply
	//	*StreamCforedCrunReply_PayloadTaskIoForwardReadyReply
	//	*StreamCforedCrunReply_PayloadTaskIoForwardReply
	Payload isStreamCforedCrunReply_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCforedCrunReply) Reset() {
	*x = StreamCforedCrunReply{}
	mi := &file_Crane_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply) ProtoMessage() {}

func (x *StreamCforedCrunReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81}
}

func (x *StreamCforedCrunReply) GetType() StreamCforedCrunReply_CforedCrunReplyType {
	if x != nil {
		return x.Type
	}
	return StreamCforedCrunReply_TASK_ID_REPLY
}

func (m *StreamCforedCrunReply) GetPayload() isStreamCforedCrunReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskIdReply() *StreamCforedCrunReply_TaskIdReply {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskIdReply); ok {
		return x.PayloadTaskIdReply
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskAllocReply() *StreamCforedCrunReply_TaskResAllocatedReply {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskAllocReply); ok {
		return x.PayloadTaskAllocReply
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskCancelRequest() *StreamCforedCrunReply_TaskCancelRequest {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskCancelRequest); ok {
		return x.PayloadTaskCancelRequest
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskCompletionAckReply() *StreamCforedCrunReply_TaskCompletionAckReply {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskCompletionAckReply); ok {
		return x.PayloadTaskCompletionAckReply
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskIoForwardReadyReply() *StreamCforedCrunReply_TaskIOForwardReadyReply {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskIoForwardReadyReply); ok {
		return x.PayloadTaskIoForwardReadyReply
	}
	return nil
}

func (x *StreamCforedCrunReply) GetPayloadTaskIoForwardReply() *StreamCforedCrunReply_TaskIOForwardReply {
	if x, ok := x.GetPayload().(*StreamCforedCrunReply_PayloadTaskIoForwardReply); ok {
		return x.PayloadTaskIoForwardReply
	}
	return nil
}

type isStreamCforedCrunReply_Payload interface {
	isStreamCforedCrunReply_Payload()
}

type StreamCforedCrunReply_PayloadTaskIdReply struct {
	PayloadTaskIdReply *StreamCforedCrunReply_TaskIdReply `protobuf:"bytes,2,opt,name=payload_task_id_reply,json=payloadTaskIdReply,proto3,oneof"`
}

type StreamCforedCrunReply_PayloadTaskAllocReply struct {
	PayloadTaskAllocReply *StreamCforedCrunReply_TaskResAllocatedReply `protobuf:"bytes,3,opt,name=payload_task_alloc_reply,json=payloadTaskAllocReply,proto3,oneof"`
}

type StreamCforedCrunReply_PayloadTaskCancelRequest struct {
	PayloadTaskCancelRequest *StreamCforedCrunReply_TaskCancelRequest `protobuf:"bytes,4,opt,name=payload_task_cancel_request,json=payloadTaskCancelRequest,proto3,oneof"`
}

type StreamCforedCrunReply_PayloadTaskCompletionAckReply struct {
	PayloadTaskCompletionAckReply *StreamCforedCrunReply_TaskCompletionAckReply `protobuf:"bytes,5,opt,name=payload_task_completion_ack_reply,json=payloadTaskCompletionAckReply,proto3,oneof"`
}

type StreamCforedCrunReply_PayloadTaskIoForwardReadyReply struct {
	PayloadTaskIoForwardReadyReply *StreamCforedCrunReply_TaskIOForwardReadyReply `protobuf:"bytes,6,opt,name=payload_task_io_forward_ready_reply,json=payloadTaskIoForwardReadyReply,proto3,oneof"`
}

type StreamCforedCrunReply_PayloadTaskIoForwardReply struct {
	PayloadTaskIoForwardReply *StreamCforedCrunReply_TaskIOForwardReply `protobuf:"bytes,7,opt,name=payload_task_io_forward_reply,json=payloadTaskIoForwardReply,proto3,oneof"`
}

func (*StreamCforedCrunReply_PayloadTaskIdReply) isStreamCforedCrunReply_Payload() {}

func (*StreamCforedCrunReply_PayloadTaskAllocReply) isStreamCforedCrunReply_Payload() {}

func (*StreamCforedCrunReply_PayloadTaskCancelRequest) isStreamCforedCrunReply_Payload() {}

func (*StreamCforedCrunReply_PayloadTaskCompletionAckReply) isStreamCforedCrunReply_Payload() {}

func (*StreamCforedCrunReply_PayloadTaskIoForwardReadyReply) isStreamCforedCrunReply_Payload() {}

func (*StreamCforedCrunReply_PayloadTaskIoForwardReply) isStreamCforedCrunReply_Payload() {}

type StreamCforedTaskIORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCforedTaskIORequest_CranedRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCforedTaskIORequest_CranedRequestType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCforedTaskIORequest_PayloadRegisterReq
	//	*StreamCforedTaskIORequest_PayloadTaskOutputReq
	//	*StreamCforedTaskIORequest_PayloadUnregisterReq
	Payload isStreamCforedTaskIORequest_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCforedTaskIORequest) Reset() {
	*x = StreamCforedTaskIORequest{}
	mi := &file_Crane_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIORequest) ProtoMessage() {}

func (x *StreamCforedTaskIORequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIORequest.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIORequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{82}
}

func (x *StreamCforedTaskIORequest) GetType() StreamCforedTaskIORequest_CranedRequestType {
	if x != nil {
		return x.Type
	}
	return StreamCforedTaskIORequest_CRANED_REGISTER
}

func (m *StreamCforedTaskIORequest) GetPayload() isStreamCforedTaskIORequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCforedTaskIORequest) GetPayloadRegisterReq() *StreamCforedTaskIORequest_CranedRegisterReq {
	if x, ok := x.GetPayload().(*StreamCforedTaskIORequest_PayloadRegisterReq); ok {
		return x.PayloadRegisterReq
	}
	return nil
}

func (x *StreamCforedTaskIORequest) GetPayloadTaskOutputReq() *StreamCforedTaskIORequest_CranedTaskOutputReq {
	if x, ok := x.GetPayload().(*StreamCforedTaskIORequest_PayloadTaskOutputReq); ok {
		return x.PayloadTaskOutputReq
	}
	return nil
}

func (x *StreamCforedTaskIORequest) GetPayloadUnregisterReq() *StreamCforedTaskIORequest_CranedUnRegisterReq {
	if x, ok := x.GetPayload().(*StreamCforedTaskIORequest_PayloadUnregisterReq); ok {
		return x.PayloadUnregisterReq
	}
	return nil
}

type isStreamCforedTaskIORequest_Payload interface {
	isStreamCforedTaskIORequest_Payload()
}

type StreamCforedTaskIORequest_PayloadRegisterReq struct {
	PayloadRegisterReq *StreamCforedTaskIORequest_CranedRegisterReq `protobuf:"bytes,2,opt,name=payload_register_req,json=payloadRegisterReq,proto3,oneof"`
}

type StreamCforedTaskIORequest_PayloadTaskOutputReq struct {
	PayloadTaskOutputReq *StreamCforedTaskIORequest_CranedTaskOutputReq `protobuf:"bytes,3,opt,name=payload_task_output_req,json=payloadTaskOutputReq,proto3,oneof"`
}

type StreamCforedTaskIORequest_PayloadUnregisterReq struct {
	PayloadUnregisterReq *StreamCforedTaskIORequest_CranedUnRegisterReq `protobuf:"bytes,4,opt,name=payload_unregister_req,json=payloadUnregisterReq,proto3,oneof"`
}

func (*StreamCforedTaskIORequest_PayloadRegisterReq) isStreamCforedTaskIORequest_Payload() {}

func (*StreamCforedTaskIORequest_PayloadTaskOutputReq) isStreamCforedTaskIORequest_Payload() {}

func (*StreamCforedTaskIORequest_PayloadUnregisterReq) isStreamCforedTaskIORequest_Payload() {}

type StreamCforedTaskIOReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamCforedTaskIOReply_CranedReplyType `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.StreamCforedTaskIOReply_CranedReplyType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*StreamCforedTaskIOReply_PayloadCranedRegisterReply
	//	*StreamCforedTaskIOReply_PayloadTaskInputReq
	//	*StreamCforedTaskIOReply_PayloadCranedUnregisterReply
	Payload isStreamCforedTaskIOReply_Payload `protobuf_oneof:"payload"`
}

func (x *StreamCforedTaskIOReply) Reset() {
	*x = StreamCforedTaskIOReply{}
	mi := &file_Crane_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIOReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIOReply) ProtoMessage() {}

func (x *StreamCforedTaskIOReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIOReply.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIOReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{83}
}

func (x *StreamCforedTaskIOReply) GetType() StreamCforedTaskIOReply_CranedReplyType {
	if x != nil {
		return x.Type
	}
	return StreamCforedTaskIOReply_CRANED_REGISTER_REPLY
}

func (m *StreamCforedTaskIOReply) GetPayload() isStreamCforedTaskIOReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamCforedTaskIOReply) GetPayloadCranedRegisterReply() *StreamCforedTaskIOReply_CranedRegisterReply {
	if x, ok := x.GetPayload().(*StreamCforedTaskIOReply_PayloadCranedRegisterReply); ok {
		return x.PayloadCranedRegisterReply
	}
	return nil
}

func (x *StreamCforedTaskIOReply) GetPayloadTaskInputReq() *StreamCforedTaskIOReply_CranedTaskInputReq {
	if x, ok := x.GetPayload().(*StreamCforedTaskIOReply_PayloadTaskInputReq); ok {
		return x.PayloadTaskInputReq
	}
	return nil
}

func (x *StreamCforedTaskIOReply) GetPayloadCranedUnregisterReply() *StreamCforedTaskIOReply_CranedUnregisterReply {
	if x, ok := x.GetPayload().(*StreamCforedTaskIOReply_PayloadCranedUnregisterReply); ok {
		return x.PayloadCranedUnregisterReply
	}
	return nil
}

type isStreamCforedTaskIOReply_Payload interface {
	isStreamCforedTaskIOReply_Payload()
}

type StreamCforedTaskIOReply_PayloadCranedRegisterReply struct {
	PayloadCranedRegisterReply *StreamCforedTaskIOReply_CranedRegisterReply `protobuf:"bytes,2,opt,name=payload_craned_register_reply,json=payloadCranedRegisterReply,proto3,oneof"`
}

type StreamCforedTaskIOReply_PayloadTaskInputReq struct {
	PayloadTaskInputReq *StreamCforedTaskIOReply_CranedTaskInputReq `protobuf:"bytes,3,opt,name=payload_task_input_req,json=payloadTaskInputReq,proto3,oneof"`
}

type StreamCforedTaskIOReply_PayloadCranedUnregisterReply struct {
	PayloadCranedUnregisterReply *StreamCforedTaskIOReply_CranedUnregisterReply `protobuf:"bytes,4,opt,name=payload_craned_unregister_reply,json=payloadCranedUnregisterReply,proto3,oneof"`
}

func (*StreamCforedTaskIOReply_PayloadCranedRegisterReply) isStreamCforedTaskIOReply_Payload() {}

func (*StreamCforedTaskIOReply_PayloadTaskInputReq) isStreamCforedTaskIOReply_Payload() {}

func (*StreamCforedTaskIOReply_PayloadCranedUnregisterReply) isStreamCforedTaskIOReply_Payload() {}

type StreamCallocRequest_TaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallocPid int32       `protobuf:"varint,1,opt,name=calloc_pid,json=callocPid,proto3" json:"calloc_pid,omitempty"`
	Task      *TaskToCtld `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *StreamCallocRequest_TaskReq) Reset() {
	*x = StreamCallocRequest_TaskReq{}
	mi := &file_Crane_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCallocRequest_TaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCallocRequest_TaskReq) ProtoMessage() {}

func (x *StreamCallocRequest_TaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCallocRequest_TaskReq.ProtoReflect.Descriptor instead.
func (*StreamCallocRequest_TaskReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{74, 0}
}

func (x *StreamCallocRequest_TaskReq) GetCallocPid() int32 {
	if x != nil {
		return x.CallocPid
	}
	return 0
}

func (x *StreamCallocRequest_TaskReq) GetTask() *TaskToCtld {
	if x != nil {
		return x.Task
	}
	return nil
}

type StreamCallocRequest_TaskCompleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32     `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
}

func (x *StreamCallocRequest_TaskCompleteReq) Reset() {
	*x = StreamCallocRequest_TaskCompleteReq{}
	mi := &file_Crane_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCallocRequest_TaskCompleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCallocRequest_TaskCompleteReq) ProtoMessage() {}

func (x *StreamCallocRequest_TaskCompleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCallocRequest_TaskCompleteReq.ProtoReflect.Descriptor instead.
func (*StreamCallocRequest_TaskCompleteReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{74, 1}
}

func (x *StreamCallocRequest_TaskCompleteReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCallocRequest_TaskCompleteReq) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

type StreamCforedReply_TaskIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok            bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	TaskId        uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FailureReason string `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *StreamCforedReply_TaskIdReply) Reset() {
	*x = StreamCforedReply_TaskIdReply{}
	mi := &file_Crane_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedReply_TaskIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedReply_TaskIdReply) ProtoMessage() {}

func (x *StreamCforedReply_TaskIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedReply_TaskIdReply.ProtoReflect.Descriptor instead.
func (*StreamCforedReply_TaskIdReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75, 0}
}

func (x *StreamCforedReply_TaskIdReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCforedReply_TaskIdReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCforedReply_TaskIdReply) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type StreamCforedReply_TaskResAllocatedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok                   bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	AllocatedCranedRegex string `protobuf:"bytes,2,opt,name=allocated_craned_regex,json=allocatedCranedRegex,proto3" json:"allocated_craned_regex,omitempty"`
}

func (x *StreamCforedReply_TaskResAllocatedReply) Reset() {
	*x = StreamCforedReply_TaskResAllocatedReply{}
	mi := &file_Crane_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedReply_TaskResAllocatedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedReply_TaskResAllocatedReply) ProtoMessage() {}

func (x *StreamCforedReply_TaskResAllocatedReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedReply_TaskResAllocatedReply.ProtoReflect.Descriptor instead.
func (*StreamCforedReply_TaskResAllocatedReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75, 1}
}

func (x *StreamCforedReply_TaskResAllocatedReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCforedReply_TaskResAllocatedReply) GetAllocatedCranedRegex() string {
	if x != nil {
		return x.AllocatedCranedRegex
	}
	return ""
}

type StreamCforedReply_TaskCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StreamCforedReply_TaskCancelRequest) Reset() {
	*x = StreamCforedReply_TaskCancelRequest{}
	mi := &file_Crane_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedReply_TaskCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedReply_TaskCancelRequest) ProtoMessage() {}

func (x *StreamCforedReply_TaskCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedReply_TaskCancelRequest.ProtoReflect.Descriptor instead.
func (*StreamCforedReply_TaskCancelRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75, 2}
}

func (x *StreamCforedReply_TaskCancelRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type StreamCforedReply_TaskCompletionAckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCforedReply_TaskCompletionAckReply) Reset() {
	*x = StreamCforedReply_TaskCompletionAckReply{}
	mi := &file_Crane_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedReply_TaskCompletionAckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedReply_TaskCompletionAckReply) ProtoMessage() {}

func (x *StreamCforedReply_TaskCompletionAckReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedReply_TaskCompletionAckReply.ProtoReflect.Descriptor instead.
func (*StreamCforedReply_TaskCompletionAckReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{75, 3}
}

func (x *StreamCforedReply_TaskCompletionAckReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamCforedRequest_CforedReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CforedName string `protobuf:"bytes,1,opt,name=cfored_name,json=cforedName,proto3" json:"cfored_name,omitempty"`
}

func (x *StreamCforedRequest_CforedReg) Reset() {
	*x = StreamCforedRequest_CforedReg{}
	mi := &file_Crane_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedRequest_CforedReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedRequest_CforedReg) ProtoMessage() {}

func (x *StreamCforedRequest_CforedReg) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedRequest_CforedReg.ProtoReflect.Descriptor instead.
func (*StreamCforedRequest_CforedReg) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76, 0}
}

func (x *StreamCforedRequest_CforedReg) GetCforedName() string {
	if x != nil {
		return x.CforedName
	}
	return ""
}

type StreamCforedRequest_TaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CforedName string      `protobuf:"bytes,1,opt,name=cfored_name,json=cforedName,proto3" json:"cfored_name,omitempty"`
	Pid        int32       `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Task       *TaskToCtld `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *StreamCforedRequest_TaskReq) Reset() {
	*x = StreamCforedRequest_TaskReq{}
	mi := &file_Crane_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedRequest_TaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedRequest_TaskReq) ProtoMessage() {}

func (x *StreamCforedRequest_TaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedRequest_TaskReq.ProtoReflect.Descriptor instead.
func (*StreamCforedRequest_TaskReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76, 1}
}

func (x *StreamCforedRequest_TaskReq) GetCforedName() string {
	if x != nil {
		return x.CforedName
	}
	return ""
}

func (x *StreamCforedRequest_TaskReq) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *StreamCforedRequest_TaskReq) GetTask() *TaskToCtld {
	if x != nil {
		return x.Task
	}
	return nil
}

type StreamCforedRequest_TaskCompleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CforedName      string              `protobuf:"bytes,1,opt,name=cfored_name,json=cforedName,proto3" json:"cfored_name,omitempty"`
	TaskId          uint32              `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status          TaskStatus          `protobuf:"varint,3,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
	InteractiveType InteractiveTaskType `protobuf:"varint,4,opt,name=interactive_type,json=interactiveType,proto3,enum=crane.grpc.InteractiveTaskType" json:"interactive_type,omitempty"`
}

func (x *StreamCforedRequest_TaskCompleteReq) Reset() {
	*x = StreamCforedRequest_TaskCompleteReq{}
	mi := &file_Crane_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedRequest_TaskCompleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedRequest_TaskCompleteReq) ProtoMessage() {}

func (x *StreamCforedRequest_TaskCompleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedRequest_TaskCompleteReq.ProtoReflect.Descriptor instead.
func (*StreamCforedRequest_TaskCompleteReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76, 2}
}

func (x *StreamCforedRequest_TaskCompleteReq) GetCforedName() string {
	if x != nil {
		return x.CforedName
	}
	return ""
}

func (x *StreamCforedRequest_TaskCompleteReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCforedRequest_TaskCompleteReq) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

func (x *StreamCforedRequest_TaskCompleteReq) GetInteractiveType() InteractiveTaskType {
	if x != nil {
		return x.InteractiveType
	}
	return InteractiveTaskType_Calloc
}

type StreamCforedRequest_GracefulExitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CforedName string `protobuf:"bytes,1,opt,name=cfored_name,json=cforedName,proto3" json:"cfored_name,omitempty"`
}

func (x *StreamCforedRequest_GracefulExitReq) Reset() {
	*x = StreamCforedRequest_GracefulExitReq{}
	mi := &file_Crane_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedRequest_GracefulExitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedRequest_GracefulExitReq) ProtoMessage() {}

func (x *StreamCforedRequest_GracefulExitReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedRequest_GracefulExitReq.ProtoReflect.Descriptor instead.
func (*StreamCforedRequest_GracefulExitReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{76, 3}
}

func (x *StreamCforedRequest_GracefulExitReq) GetCforedName() string {
	if x != nil {
		return x.CforedName
	}
	return ""
}

type StreamCtldReply_TaskIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid           int32  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Ok            bool   `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	TaskId        uint32 `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FailureReason string `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *StreamCtldReply_TaskIdReply) Reset() {
	*x = StreamCtldReply_TaskIdReply{}
	mi := &file_Crane_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_TaskIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_TaskIdReply) ProtoMessage() {}

func (x *StreamCtldReply_TaskIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_TaskIdReply.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_TaskIdReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 0}
}

func (x *StreamCtldReply_TaskIdReply) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *StreamCtldReply_TaskIdReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCtldReply_TaskIdReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCtldReply_TaskIdReply) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type StreamCtldReply_TaskResAllocatedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId               uint32   `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Ok                   bool     `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	AllocatedCranedRegex string   `protobuf:"bytes,3,opt,name=allocated_craned_regex,json=allocatedCranedRegex,proto3" json:"allocated_craned_regex,omitempty"`
	FailureReason        string   `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	CranedIds            []string `protobuf:"bytes,5,rep,name=craned_ids,json=cranedIds,proto3" json:"craned_ids,omitempty"`
}

func (x *StreamCtldReply_TaskResAllocatedReply) Reset() {
	*x = StreamCtldReply_TaskResAllocatedReply{}
	mi := &file_Crane_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_TaskResAllocatedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_TaskResAllocatedReply) ProtoMessage() {}

func (x *StreamCtldReply_TaskResAllocatedReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_TaskResAllocatedReply.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_TaskResAllocatedReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 1}
}

func (x *StreamCtldReply_TaskResAllocatedReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCtldReply_TaskResAllocatedReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCtldReply_TaskResAllocatedReply) GetAllocatedCranedRegex() string {
	if x != nil {
		return x.AllocatedCranedRegex
	}
	return ""
}

func (x *StreamCtldReply_TaskResAllocatedReply) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *StreamCtldReply_TaskResAllocatedReply) GetCranedIds() []string {
	if x != nil {
		return x.CranedIds
	}
	return nil
}

type StreamCtldReply_TaskCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StreamCtldReply_TaskCancelRequest) Reset() {
	*x = StreamCtldReply_TaskCancelRequest{}
	mi := &file_Crane_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_TaskCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_TaskCancelRequest) ProtoMessage() {}

func (x *StreamCtldReply_TaskCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_TaskCancelRequest.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_TaskCancelRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 2}
}

func (x *StreamCtldReply_TaskCancelRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type StreamCtldReply_TaskCompletionAckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StreamCtldReply_TaskCompletionAckReply) Reset() {
	*x = StreamCtldReply_TaskCompletionAckReply{}
	mi := &file_Crane_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_TaskCompletionAckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_TaskCompletionAckReply) ProtoMessage() {}

func (x *StreamCtldReply_TaskCompletionAckReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_TaskCompletionAckReply.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_TaskCompletionAckReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 3}
}

func (x *StreamCtldReply_TaskCompletionAckReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type StreamCtldReply_CforedRegistrationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok            bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	FailureReason string `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *StreamCtldReply_CforedRegistrationAck) Reset() {
	*x = StreamCtldReply_CforedRegistrationAck{}
	mi := &file_Crane_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_CforedRegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_CforedRegistrationAck) ProtoMessage() {}

func (x *StreamCtldReply_CforedRegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_CforedRegistrationAck.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_CforedRegistrationAck) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 4}
}

func (x *StreamCtldReply_CforedRegistrationAck) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCtldReply_CforedRegistrationAck) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type StreamCtldReply_CforedGracefulExitAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCtldReply_CforedGracefulExitAck) Reset() {
	*x = StreamCtldReply_CforedGracefulExitAck{}
	mi := &file_Crane_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCtldReply_CforedGracefulExitAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtldReply_CforedGracefulExitAck) ProtoMessage() {}

func (x *StreamCtldReply_CforedGracefulExitAck) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtldReply_CforedGracefulExitAck.ProtoReflect.Descriptor instead.
func (*StreamCtldReply_CforedGracefulExitAck) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{77, 5}
}

func (x *StreamCtldReply_CforedGracefulExitAck) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamCrunRequest_TaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrunPid int32       `protobuf:"varint,1,opt,name=crun_pid,json=crunPid,proto3" json:"crun_pid,omitempty"`
	Task    *TaskToCtld `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *StreamCrunRequest_TaskReq) Reset() {
	*x = StreamCrunRequest_TaskReq{}
	mi := &file_Crane_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCrunRequest_TaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCrunRequest_TaskReq) ProtoMessage() {}

func (x *StreamCrunRequest_TaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCrunRequest_TaskReq.ProtoReflect.Descriptor instead.
func (*StreamCrunRequest_TaskReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{80, 0}
}

func (x *StreamCrunRequest_TaskReq) GetCrunPid() int32 {
	if x != nil {
		return x.CrunPid
	}
	return 0
}

func (x *StreamCrunRequest_TaskReq) GetTask() *TaskToCtld {
	if x != nil {
		return x.Task
	}
	return nil
}

type StreamCrunRequest_TaskCompleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32     `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
}

func (x *StreamCrunRequest_TaskCompleteReq) Reset() {
	*x = StreamCrunRequest_TaskCompleteReq{}
	mi := &file_Crane_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCrunRequest_TaskCompleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCrunRequest_TaskCompleteReq) ProtoMessage() {}

func (x *StreamCrunRequest_TaskCompleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCrunRequest_TaskCompleteReq.ProtoReflect.Descriptor instead.
func (*StreamCrunRequest_TaskCompleteReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{80, 1}
}

func (x *StreamCrunRequest_TaskCompleteReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCrunRequest_TaskCompleteReq) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

type StreamCrunRequest_TaskIOForwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamCrunRequest_TaskIOForwardReq) Reset() {
	*x = StreamCrunRequest_TaskIOForwardReq{}
	mi := &file_Crane_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCrunRequest_TaskIOForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCrunRequest_TaskIOForwardReq) ProtoMessage() {}

func (x *StreamCrunRequest_TaskIOForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCrunRequest_TaskIOForwardReq.ProtoReflect.Descriptor instead.
func (*StreamCrunRequest_TaskIOForwardReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{80, 2}
}

func (x *StreamCrunRequest_TaskIOForwardReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCrunRequest_TaskIOForwardReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type StreamCforedCrunReply_TaskIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok            bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	TaskId        uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FailureReason string `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *StreamCforedCrunReply_TaskIdReply) Reset() {
	*x = StreamCforedCrunReply_TaskIdReply{}
	mi := &file_Crane_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskIdReply) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskIdReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskIdReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 0}
}

func (x *StreamCforedCrunReply_TaskIdReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCforedCrunReply_TaskIdReply) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCforedCrunReply_TaskIdReply) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type StreamCforedCrunReply_TaskResAllocatedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok                   bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	AllocatedCranedRegex string `protobuf:"bytes,2,opt,name=allocated_craned_regex,json=allocatedCranedRegex,proto3" json:"allocated_craned_regex,omitempty"`
}

func (x *StreamCforedCrunReply_TaskResAllocatedReply) Reset() {
	*x = StreamCforedCrunReply_TaskResAllocatedReply{}
	mi := &file_Crane_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskResAllocatedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskResAllocatedReply) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskResAllocatedReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskResAllocatedReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskResAllocatedReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 1}
}

func (x *StreamCforedCrunReply_TaskResAllocatedReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StreamCforedCrunReply_TaskResAllocatedReply) GetAllocatedCranedRegex() string {
	if x != nil {
		return x.AllocatedCranedRegex
	}
	return ""
}

type StreamCforedCrunReply_TaskCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StreamCforedCrunReply_TaskCancelRequest) Reset() {
	*x = StreamCforedCrunReply_TaskCancelRequest{}
	mi := &file_Crane_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskCancelRequest) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskCancelRequest.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskCancelRequest) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 2}
}

func (x *StreamCforedCrunReply_TaskCancelRequest) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type StreamCforedCrunReply_TaskCompletionAckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCforedCrunReply_TaskCompletionAckReply) Reset() {
	*x = StreamCforedCrunReply_TaskCompletionAckReply{}
	mi := &file_Crane_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskCompletionAckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskCompletionAckReply) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskCompletionAckReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskCompletionAckReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskCompletionAckReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 3}
}

func (x *StreamCforedCrunReply_TaskCompletionAckReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamCforedCrunReply_TaskIOForwardReadyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCforedCrunReply_TaskIOForwardReadyReply) Reset() {
	*x = StreamCforedCrunReply_TaskIOForwardReadyReply{}
	mi := &file_Crane_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskIOForwardReadyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskIOForwardReadyReply) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskIOForwardReadyReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskIOForwardReadyReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskIOForwardReadyReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 4}
}

func (x *StreamCforedCrunReply_TaskIOForwardReadyReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamCforedCrunReply_TaskIOForwardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamCforedCrunReply_TaskIOForwardReply) Reset() {
	*x = StreamCforedCrunReply_TaskIOForwardReply{}
	mi := &file_Crane_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedCrunReply_TaskIOForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedCrunReply_TaskIOForwardReply) ProtoMessage() {}

func (x *StreamCforedCrunReply_TaskIOForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedCrunReply_TaskIOForwardReply.ProtoReflect.Descriptor instead.
func (*StreamCforedCrunReply_TaskIOForwardReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{81, 5}
}

func (x *StreamCforedCrunReply_TaskIOForwardReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type StreamCforedTaskIORequest_CranedRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CranedId string `protobuf:"bytes,1,opt,name=craned_id,json=cranedId,proto3" json:"craned_id,omitempty"`
}

func (x *StreamCforedTaskIORequest_CranedRegisterReq) Reset() {
	*x = StreamCforedTaskIORequest_CranedRegisterReq{}
	mi := &file_Crane_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIORequest_CranedRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIORequest_CranedRegisterReq) ProtoMessage() {}

func (x *StreamCforedTaskIORequest_CranedRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIORequest_CranedRegisterReq.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIORequest_CranedRegisterReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{82, 0}
}

func (x *StreamCforedTaskIORequest_CranedRegisterReq) GetCranedId() string {
	if x != nil {
		return x.CranedId
	}
	return ""
}

type StreamCforedTaskIORequest_CranedTaskOutputReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamCforedTaskIORequest_CranedTaskOutputReq) Reset() {
	*x = StreamCforedTaskIORequest_CranedTaskOutputReq{}
	mi := &file_Crane_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIORequest_CranedTaskOutputReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIORequest_CranedTaskOutputReq) ProtoMessage() {}

func (x *StreamCforedTaskIORequest_CranedTaskOutputReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIORequest_CranedTaskOutputReq.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIORequest_CranedTaskOutputReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{82, 1}
}

func (x *StreamCforedTaskIORequest_CranedTaskOutputReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCforedTaskIORequest_CranedTaskOutputReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type StreamCforedTaskIORequest_CranedUnRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CranedId string `protobuf:"bytes,1,opt,name=craned_id,json=cranedId,proto3" json:"craned_id,omitempty"`
}

func (x *StreamCforedTaskIORequest_CranedUnRegisterReq) Reset() {
	*x = StreamCforedTaskIORequest_CranedUnRegisterReq{}
	mi := &file_Crane_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIORequest_CranedUnRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIORequest_CranedUnRegisterReq) ProtoMessage() {}

func (x *StreamCforedTaskIORequest_CranedUnRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIORequest_CranedUnRegisterReq.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIORequest_CranedUnRegisterReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{82, 2}
}

func (x *StreamCforedTaskIORequest_CranedUnRegisterReq) GetCranedId() string {
	if x != nil {
		return x.CranedId
	}
	return ""
}

type StreamCforedTaskIOReply_CranedRegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCforedTaskIOReply_CranedRegisterReply) Reset() {
	*x = StreamCforedTaskIOReply_CranedRegisterReply{}
	mi := &file_Crane_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIOReply_CranedRegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIOReply_CranedRegisterReply) ProtoMessage() {}

func (x *StreamCforedTaskIOReply_CranedRegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIOReply_CranedRegisterReply.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIOReply_CranedRegisterReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{83, 0}
}

func (x *StreamCforedTaskIOReply_CranedRegisterReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamCforedTaskIOReply_CranedTaskInputReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamCforedTaskIOReply_CranedTaskInputReq) Reset() {
	*x = StreamCforedTaskIOReply_CranedTaskInputReq{}
	mi := &file_Crane_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIOReply_CranedTaskInputReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIOReply_CranedTaskInputReq) ProtoMessage() {}

func (x *StreamCforedTaskIOReply_CranedTaskInputReq) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIOReply_CranedTaskInputReq.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIOReply_CranedTaskInputReq) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{83, 1}
}

func (x *StreamCforedTaskIOReply_CranedTaskInputReq) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StreamCforedTaskIOReply_CranedTaskInputReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type StreamCforedTaskIOReply_CranedUnregisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamCforedTaskIOReply_CranedUnregisterReply) Reset() {
	*x = StreamCforedTaskIOReply_CranedUnregisterReply{}
	mi := &file_Crane_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCforedTaskIOReply_CranedUnregisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCforedTaskIOReply_CranedUnregisterReply) ProtoMessage() {}

func (x *StreamCforedTaskIOReply_CranedUnregisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_Crane_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCforedTaskIOReply_CranedUnregisterReply.ProtoReflect.Descriptor instead.
func (*StreamCforedTaskIOReply_CranedUnregisterReply) Descriptor() ([]byte, []int) {
	return file_Crane_proto_rawDescGZIP(), []int{83, 2}
}

func (x *StreamCforedTaskIOReply_CranedUnregisterReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_Crane_proto protoreflect.FileDescriptor

var file_Crane_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x17,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x22, 0x34, 0x0a, 0x15, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x61, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x3b,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44,
	0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x66, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x19, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5b, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x15, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x44,
	0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x13,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x5b, 0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39,
	0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1c, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x1a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x31, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x8b, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x73, 0x68, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd6,
	0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x61,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4e, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x4c, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x4b, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x51, 0x6f, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x51, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x51, 0x6f, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x3f, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51, 0x6f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x71, 0x6f, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x56, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x1d, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x6f, 0x43, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x6f, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x22, 0x37, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb4, 0x01,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x4b, 0x0a, 0x07,
	0x65, 0x6e, 0x76, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x6e, 0x76,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x21,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65,
	0x6e, 0x76, 0x4d, 0x61, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xae, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x1d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x72, 0x61, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x5f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x69, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x05, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x51, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55,
	0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x17, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x61, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa0, 0x04, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x6c, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x54, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74,
	0x6c, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x5a, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xb4, 0x07, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x18,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x1b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80,
	0x01, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x1d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x1a, 0x5d, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0x5d, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a,
	0x2c, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x28, 0x0a,
	0x16, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x76, 0x0a, 0x0f, 0x43, 0x66, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x80, 0x08, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x66, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x6c, 0x0a, 0x19, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x6c, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x16, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x45, 0x78,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x0a, 0x09, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x68, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0xc7, 0x01,
	0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x32, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x43,
	0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x46, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x46, 0x4f, 0x52,
	0x45, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa9, 0x0b,
	0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x74, 0x6c,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x68, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x66, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x73, 0x0a, 0x1c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6e, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x73, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x6b, 0x12, 0x5c, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x45, 0x78, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x41,
	0x63, 0x6b, 0x1a, 0x6f, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0xbc, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x1a, 0x2c, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x1a, 0x31, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x1a, 0x4e, 0x0a, 0x15, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x27, 0x0a, 0x15, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0xaf, 0x01, 0x0a,
	0x0d, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x46, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x46, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x10, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x22, 0xd4, 0x05, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x6a, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x6e, 0x0a, 0x1b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6f, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x17, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x50, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x72, 0x75, 0x6e, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x75, 0x6e, 0x50, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x5a, 0x0a,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3d, 0x0a, 0x10, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x4f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x55, 0x0a, 0x0f, 0x43, 0x72, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdd, 0x0a, 0x0a, 0x15, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x62, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43,
	0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x74, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01,
	0x0a, 0x21, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52,
	0x1e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6f, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x78, 0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64,
	0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x19,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6f, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x5d, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x2c, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x28, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x1a,
	0x29, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x1a, 0x26, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x4f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4f, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc8, 0x05, 0x0a, 0x19, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x72, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x71, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x61, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x0a, 0x11, 0x43, 0x72, 0x61,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x13, 0x43,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x32, 0x0a,
	0x13, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49,
	0x64, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x52, 0x41, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd2, 0x05, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x72,
	0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x1c,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x25, 0x0a, 0x13,
	0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x1a, 0x3f, 0x0a, 0x12, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x1a, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x60, 0x0a,
	0x0f, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x52, 0x41, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x8f, 0x10, 0x0a, 0x09, 0x43,
	0x72, 0x61, 0x6e, 0x65, 0x43, 0x74, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x74, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x5a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x56, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x51, 0x6f, 0x73, 0x12, 0x19, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x51, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x45, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x51, 0x6f, 0x73, 0x12, 0x1c,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x51, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xcc, 0x0a, 0x0a,
	0x06, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x66, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x28, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x69, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72,
	0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a,
	0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x21, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x70,
	0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x78, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x16, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x73, 0x68,
	0x50, 0x72, 0x6f, 0x63, 0x54, 0x6f, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x6f, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x63, 0x54, 0x6f, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x69, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xf9, 0x02, 0x0a, 0x0a,
	0x43, 0x72, 0x61, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x44, 0x12, 0x52, 0x0a, 0x0c, 0x43, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x66, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x52,
	0x0a, 0x0a, 0x43, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x66, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x25, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x66, 0x6f,
	0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Crane_proto_rawDescOnce sync.Once
	file_Crane_proto_rawDescData = file_Crane_proto_rawDesc
)

func file_Crane_proto_rawDescGZIP() []byte {
	file_Crane_proto_rawDescOnce.Do(func() {
		file_Crane_proto_rawDescData = protoimpl.X.CompressGZIP(file_Crane_proto_rawDescData)
	})
	return file_Crane_proto_rawDescData
}

var file_Crane_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_Crane_proto_msgTypes = make([]protoimpl.MessageInfo, 117)
var file_Crane_proto_goTypes = []any{
	(ModifyTaskRequest_TargetAttributes)(0),               // 0: crane.grpc.ModifyTaskRequest.TargetAttributes
	(StreamCallocRequest_CallocRequestType)(0),            // 1: crane.grpc.StreamCallocRequest.CallocRequestType
	(StreamCforedReply_CforedReplyType)(0),                // 2: crane.grpc.StreamCforedReply.CforedReplyType
	(StreamCforedRequest_CforedRequestType)(0),            // 3: crane.grpc.StreamCforedRequest.CforedRequestType
	(StreamCtldReply_CtldReplyType)(0),                    // 4: crane.grpc.StreamCtldReply.CtldReplyType
	(StreamCrunRequest_CrunRequestType)(0),                // 5: crane.grpc.StreamCrunRequest.CrunRequestType
	(StreamCforedCrunReply_CforedCrunReplyType)(0),        // 6: crane.grpc.StreamCforedCrunReply.CforedCrunReplyType
	(StreamCforedTaskIORequest_CranedRequestType)(0),      // 7: crane.grpc.StreamCforedTaskIORequest.CranedRequestType
	(StreamCforedTaskIOReply_CranedReplyType)(0),          // 8: crane.grpc.StreamCforedTaskIOReply.CranedReplyType
	(*TaskStatusChangeRequest)(nil),                       // 9: crane.grpc.TaskStatusChangeRequest
	(*TaskStatusChangeReply)(nil),                         // 10: crane.grpc.TaskStatusChangeReply
	(*CranedRegisterRequest)(nil),                         // 11: crane.grpc.CranedRegisterRequest
	(*CranedRegisterReply)(nil),                           // 12: crane.grpc.CranedRegisterReply
	(*QueryCranedListFromTaskIdRequest)(nil),              // 13: crane.grpc.QueryCranedListFromTaskIdRequest
	(*QueryCranedListFromTaskIdReply)(nil),                // 14: crane.grpc.QueryCranedListFromTaskIdReply
	(*SubmitBatchTaskRequest)(nil),                        // 15: crane.grpc.SubmitBatchTaskRequest
	(*SubmitBatchTaskReply)(nil),                          // 16: crane.grpc.SubmitBatchTaskReply
	(*SubmitBatchTasksRequest)(nil),                       // 17: crane.grpc.SubmitBatchTasksRequest
	(*SubmitBatchTasksReply)(nil),                         // 18: crane.grpc.SubmitBatchTasksReply
	(*ExecuteTasksRequest)(nil),                           // 19: crane.grpc.ExecuteTasksRequest
	(*ExecuteTasksReply)(nil),                             // 20: crane.grpc.ExecuteTasksReply
	(*CreateCgroupForTasksRequest)(nil),                   // 21: crane.grpc.CreateCgroupForTasksRequest
	(*CreateCgroupForTasksReply)(nil),                     // 22: crane.grpc.CreateCgroupForTasksReply
	(*ReleaseCgroupForTasksRequest)(nil),                  // 23: crane.grpc.ReleaseCgroupForTasksRequest
	(*ReleaseCgroupForTasksReply)(nil),                    // 24: crane.grpc.ReleaseCgroupForTasksReply
	(*TerminateTasksRequest)(nil),                         // 25: crane.grpc.TerminateTasksRequest
	(*TerminateTasksReply)(nil),                           // 26: crane.grpc.TerminateTasksReply
	(*TerminateOrphanedTaskRequest)(nil),                  // 27: crane.grpc.TerminateOrphanedTaskRequest
	(*TerminateOrphanedTaskReply)(nil),                    // 28: crane.grpc.TerminateOrphanedTaskReply
	(*ChangeTaskTimeLimitRequest)(nil),                    // 29: crane.grpc.ChangeTaskTimeLimitRequest
	(*ChangeTaskTimeLimitReply)(nil),                      // 30: crane.grpc.ChangeTaskTimeLimitReply
	(*CheckTaskStatusRequest)(nil),                        // 31: crane.grpc.CheckTaskStatusRequest
	(*CheckTaskStatusReply)(nil),                          // 32: crane.grpc.CheckTaskStatusReply
	(*CancelTaskRequest)(nil),                             // 33: crane.grpc.CancelTaskRequest
	(*CancelTaskReply)(nil),                               // 34: crane.grpc.CancelTaskReply
	(*QueryTaskIdFromPortRequest)(nil),                    // 35: crane.grpc.QueryTaskIdFromPortRequest
	(*QueryTaskIdFromPortReply)(nil),                      // 36: crane.grpc.QueryTaskIdFromPortReply
	(*QueryTaskIdFromPortForwardRequest)(nil),             // 37: crane.grpc.QueryTaskIdFromPortForwardRequest
	(*QueryTaskIdFromPortForwardReply)(nil),               // 38: crane.grpc.QueryTaskIdFromPortForwardReply
	(*QueryCranedInfoRequest)(nil),                        // 39: crane.grpc.QueryCranedInfoRequest
	(*QueryCranedInfoReply)(nil),                          // 40: crane.grpc.QueryCranedInfoReply
	(*QueryPartitionInfoRequest)(nil),                     // 41: crane.grpc.QueryPartitionInfoRequest
	(*QueryPartitionInfoReply)(nil),                       // 42: crane.grpc.QueryPartitionInfoReply
	(*ModifyTaskRequest)(nil),                             // 43: crane.grpc.ModifyTaskRequest
	(*ModifyTaskReply)(nil),                               // 44: crane.grpc.ModifyTaskReply
	(*ModifyCranedStateRequest)(nil),                      // 45: crane.grpc.ModifyCranedStateRequest
	(*ModifyCranedStateReply)(nil),                        // 46: crane.grpc.ModifyCranedStateReply
	(*AddAccountRequest)(nil),                             // 47: crane.grpc.AddAccountRequest
	(*AddAccountReply)(nil),                               // 48: crane.grpc.AddAccountReply
	(*AddUserRequest)(nil),                                // 49: crane.grpc.AddUserRequest
	(*AddUserReply)(nil),                                  // 50: crane.grpc.AddUserReply
	(*AddQosRequest)(nil),                                 // 51: crane.grpc.AddQosRequest
	(*AddQosReply)(nil),                                   // 52: crane.grpc.AddQosReply
	(*DeleteAccountRequest)(nil),                          // 53: crane.grpc.DeleteAccountRequest
	(*DeleteAccountReply)(nil),                            // 54: crane.grpc.DeleteAccountReply
	(*DeleteUserRequest)(nil),                             // 55: crane.grpc.DeleteUserRequest
	(*DeleteUserReply)(nil),                               // 56: crane.grpc.DeleteUserReply
	(*DeleteQosRequest)(nil),                              // 57: crane.grpc.DeleteQosRequest
	(*DeleteQosReply)(nil),                                // 58: crane.grpc.DeleteQosReply
	(*ModifyAccountRequest)(nil),                          // 59: crane.grpc.ModifyAccountRequest
	(*ModifyAccountReply)(nil),                            // 60: crane.grpc.ModifyAccountReply
	(*ModifyUserRequest)(nil),                             // 61: crane.grpc.ModifyUserRequest
	(*ModifyUserReply)(nil),                               // 62: crane.grpc.ModifyUserReply
	(*ModifyQosRequest)(nil),                              // 63: crane.grpc.ModifyQosRequest
	(*ModifyQosReply)(nil),                                // 64: crane.grpc.ModifyQosReply
	(*QueryAccountInfoRequest)(nil),                       // 65: crane.grpc.QueryAccountInfoRequest
	(*QueryAccountInfoReply)(nil),                         // 66: crane.grpc.QueryAccountInfoReply
	(*QueryUserInfoRequest)(nil),                          // 67: crane.grpc.QueryUserInfoRequest
	(*QueryUserInfoReply)(nil),                            // 68: crane.grpc.QueryUserInfoReply
	(*QueryQosInfoRequest)(nil),                           // 69: crane.grpc.QueryQosInfoRequest
	(*QueryQosInfoReply)(nil),                             // 70: crane.grpc.QueryQosInfoReply
	(*BlockAccountOrUserRequest)(nil),                     // 71: crane.grpc.BlockAccountOrUserRequest
	(*BlockAccountOrUserReply)(nil),                       // 72: crane.grpc.BlockAccountOrUserReply
	(*MigrateSshProcToCgroupRequest)(nil),                 // 73: crane.grpc.MigrateSshProcToCgroupRequest
	(*MigrateSshProcToCgroupReply)(nil),                   // 74: crane.grpc.MigrateSshProcToCgroupReply
	(*QueryTaskEnvVariablesRequest)(nil),                  // 75: crane.grpc.QueryTaskEnvVariablesRequest
	(*QueryTaskEnvVariablesReply)(nil),                    // 76: crane.grpc.QueryTaskEnvVariablesReply
	(*QueryTaskEnvVariablesForwardRequest)(nil),           // 77: crane.grpc.QueryTaskEnvVariablesForwardRequest
	(*QueryTaskEnvVariablesForwardReply)(nil),             // 78: crane.grpc.QueryTaskEnvVariablesForwardReply
	(*QueryClusterInfoRequest)(nil),                       // 79: crane.grpc.QueryClusterInfoRequest
	(*QueryClusterInfoReply)(nil),                         // 80: crane.grpc.QueryClusterInfoReply
	(*QueryTasksInfoRequest)(nil),                         // 81: crane.grpc.QueryTasksInfoRequest
	(*QueryTasksInfoReply)(nil),                           // 82: crane.grpc.QueryTasksInfoReply
	(*StreamCallocRequest)(nil),                           // 83: crane.grpc.StreamCallocRequest
	(*StreamCforedReply)(nil),                             // 84: crane.grpc.StreamCforedReply
	(*StreamCforedRequest)(nil),                           // 85: crane.grpc.StreamCforedRequest
	(*StreamCtldReply)(nil),                               // 86: crane.grpc.StreamCtldReply
	(*QueryCranedRemoteMetaRequest)(nil),                  // 87: crane.grpc.QueryCranedRemoteMetaRequest
	(*QueryCranedRemoteMetaReply)(nil),                    // 88: crane.grpc.QueryCranedRemoteMetaReply
	(*StreamCrunRequest)(nil),                             // 89: crane.grpc.StreamCrunRequest
	(*StreamCforedCrunReply)(nil),                         // 90: crane.grpc.StreamCforedCrunReply
	(*StreamCforedTaskIORequest)(nil),                     // 91: crane.grpc.StreamCforedTaskIORequest
	(*StreamCforedTaskIOReply)(nil),                       // 92: crane.grpc.StreamCforedTaskIOReply
	nil,                                                   // 93: crane.grpc.QueryTaskEnvVariablesReply.EnvMapEntry
	nil,                                                   // 94: crane.grpc.QueryTaskEnvVariablesForwardReply.EnvMapEntry
	(*StreamCallocRequest_TaskReq)(nil),                   // 95: crane.grpc.StreamCallocRequest.TaskReq
	(*StreamCallocRequest_TaskCompleteReq)(nil),           // 96: crane.grpc.StreamCallocRequest.TaskCompleteReq
	(*StreamCforedReply_TaskIdReply)(nil),                 // 97: crane.grpc.StreamCforedReply.TaskIdReply
	(*StreamCforedReply_TaskResAllocatedReply)(nil),       // 98: crane.grpc.StreamCforedReply.TaskResAllocatedReply
	(*StreamCforedReply_TaskCancelRequest)(nil),           // 99: crane.grpc.StreamCforedReply.TaskCancelRequest
	(*StreamCforedReply_TaskCompletionAckReply)(nil),      // 100: crane.grpc.StreamCforedReply.TaskCompletionAckReply
	(*StreamCforedRequest_CforedReg)(nil),                 // 101: crane.grpc.StreamCforedRequest.CforedReg
	(*StreamCforedRequest_TaskReq)(nil),                   // 102: crane.grpc.StreamCforedRequest.TaskReq
	(*StreamCforedRequest_TaskCompleteReq)(nil),           // 103: crane.grpc.StreamCforedRequest.TaskCompleteReq
	(*StreamCforedRequest_GracefulExitReq)(nil),           // 104: crane.grpc.StreamCforedRequest.GracefulExitReq
	(*StreamCtldReply_TaskIdReply)(nil),                   // 105: crane.grpc.StreamCtldReply.TaskIdReply
	(*StreamCtldReply_TaskResAllocatedReply)(nil),         // 106: crane.grpc.StreamCtldReply.TaskResAllocatedReply
	(*StreamCtldReply_TaskCancelRequest)(nil),             // 107: crane.grpc.StreamCtldReply.TaskCancelRequest
	(*StreamCtldReply_TaskCompletionAckReply)(nil),        // 108: crane.grpc.StreamCtldReply.TaskCompletionAckReply
	(*StreamCtldReply_CforedRegistrationAck)(nil),         // 109: crane.grpc.StreamCtldReply.CforedRegistrationAck
	(*StreamCtldReply_CforedGracefulExitAck)(nil),         // 110: crane.grpc.StreamCtldReply.CforedGracefulExitAck
	(*StreamCrunRequest_TaskReq)(nil),                     // 111: crane.grpc.StreamCrunRequest.TaskReq
	(*StreamCrunRequest_TaskCompleteReq)(nil),             // 112: crane.grpc.StreamCrunRequest.TaskCompleteReq
	(*StreamCrunRequest_TaskIOForwardReq)(nil),            // 113: crane.grpc.StreamCrunRequest.TaskIOForwardReq
	(*StreamCforedCrunReply_TaskIdReply)(nil),             // 114: crane.grpc.StreamCforedCrunReply.TaskIdReply
	(*StreamCforedCrunReply_TaskResAllocatedReply)(nil),   // 115: crane.grpc.StreamCforedCrunReply.TaskResAllocatedReply
	(*StreamCforedCrunReply_TaskCancelRequest)(nil),       // 116: crane.grpc.StreamCforedCrunReply.TaskCancelRequest
	(*StreamCforedCrunReply_TaskCompletionAckReply)(nil),  // 117: crane.grpc.StreamCforedCrunReply.TaskCompletionAckReply
	(*StreamCforedCrunReply_TaskIOForwardReadyReply)(nil), // 118: crane.grpc.StreamCforedCrunReply.TaskIOForwardReadyReply
	(*StreamCforedCrunReply_TaskIOForwardReply)(nil),      // 119: crane.grpc.StreamCforedCrunReply.TaskIOForwardReply
	(*StreamCforedTaskIORequest_CranedRegisterReq)(nil),   // 120: crane.grpc.StreamCforedTaskIORequest.CranedRegisterReq
	(*StreamCforedTaskIORequest_CranedTaskOutputReq)(nil), // 121: crane.grpc.StreamCforedTaskIORequest.CranedTaskOutputReq
	(*StreamCforedTaskIORequest_CranedUnRegisterReq)(nil), // 122: crane.grpc.StreamCforedTaskIORequest.CranedUnRegisterReq
	(*StreamCforedTaskIOReply_CranedRegisterReply)(nil),   // 123: crane.grpc.StreamCforedTaskIOReply.CranedRegisterReply
	(*StreamCforedTaskIOReply_CranedTaskInputReq)(nil),    // 124: crane.grpc.StreamCforedTaskIOReply.CranedTaskInputReq
	(*StreamCforedTaskIOReply_CranedUnregisterReply)(nil), // 125: crane.grpc.StreamCforedTaskIOReply.CranedUnregisterReply
	(TaskStatus)(0),                                       // 126: crane.grpc.TaskStatus
	(*TaskToCtld)(nil),                                    // 127: crane.grpc.TaskToCtld
	(*TaskToD)(nil),                                       // 128: crane.grpc.TaskToD
	(*ResourceInNode)(nil),                                // 129: crane.grpc.ResourceInNode
	(*CranedInfo)(nil),                                    // 130: crane.grpc.CranedInfo
	(*PartitionInfo)(nil),                                 // 131: crane.grpc.PartitionInfo
	(CranedControlState)(0),                               // 132: crane.grpc.CranedControlState
	(*AccountInfo)(nil),                                   // 133: crane.grpc.AccountInfo
	(ErrCode)(0),                                          // 134: crane.grpc.ErrCode
	(*UserInfo)(nil),                                      // 135: crane.grpc.UserInfo
	(*QosInfo)(nil),                                       // 136: crane.grpc.QosInfo
	(ModifyField)(0),                                      // 137: crane.grpc.ModifyField
	(OperationType)(0),                                    // 138: crane.grpc.OperationType
	(EntityType)(0),                                       // 139: crane.grpc.EntityType
	(CranedResourceState)(0),                              // 140: crane.grpc.CranedResourceState
	(*TrimmedPartitionInfo)(nil),                          // 141: crane.grpc.TrimmedPartitionInfo
	(*TimeInterval)(nil),                                  // 142: crane.grpc.TimeInterval
	(*TaskInfo)(nil),                                      // 143: crane.grpc.TaskInfo
	(*CranedRemoteMeta)(nil),                              // 144: crane.grpc.CranedRemoteMeta
	(InteractiveTaskType)(0),                              // 145: crane.grpc.InteractiveTaskType
}
var file_Crane_proto_depIdxs = []int32{
	126, // 0: crane.grpc.TaskStatusChangeRequest.new_status:type_name -> crane.grpc.TaskStatus
	127, // 1: crane.grpc.SubmitBatchTaskRequest.task:type_name -> crane.grpc.TaskToCtld
	127, // 2: crane.grpc.SubmitBatchTasksRequest.task:type_name -> crane.grpc.TaskToCtld
	128, // 3: crane.grpc.ExecuteTasksRequest.tasks:type_name -> crane.grpc.TaskToD
	129, // 4: crane.grpc.CreateCgroupForTasksRequest.res_list:type_name -> crane.grpc.ResourceInNode
	126, // 5: crane.grpc.CheckTaskStatusReply.status:type_name -> crane.grpc.TaskStatus
	126, // 6: crane.grpc.CancelTaskRequest.filter_state:type_name -> crane.grpc.TaskStatus
	130, // 7: crane.grpc.QueryCranedInfoReply.craned_info_list:type_name -> crane.grpc.CranedInfo
	131, // 8: crane.grpc.QueryPartitionInfoReply.partition_info:type_name -> crane.grpc.PartitionInfo
	0,   // 9: crane.grpc.ModifyTaskRequest.attribute:type_name -> crane.grpc.ModifyTaskRequest.TargetAttributes
	132, // 10: crane.grpc.ModifyCranedStateRequest.new_state:type_name -> crane.grpc.CranedControlState
	133, // 11: crane.grpc.AddAccountRequest.account:type_name -> crane.grpc.AccountInfo
	134, // 12: crane.grpc.AddAccountReply.reason:type_name -> crane.grpc.ErrCode
	135, // 13: crane.grpc.AddUserRequest.user:type_name -> crane.grpc.UserInfo
	134, // 14: crane.grpc.AddUserReply.reason:type_name -> crane.grpc.ErrCode
	136, // 15: crane.grpc.AddQosRequest.qos:type_name -> crane.grpc.QosInfo
	134, // 16: crane.grpc.AddQosReply.reason:type_name -> crane.grpc.ErrCode
	134, // 17: crane.grpc.DeleteAccountReply.reason:type_name -> crane.grpc.ErrCode
	134, // 18: crane.grpc.DeleteUserReply.reason:type_name -> crane.grpc.ErrCode
	134, // 19: crane.grpc.DeleteQosReply.reason:type_name -> crane.grpc.ErrCode
	137, // 20: crane.grpc.ModifyAccountRequest.modify_field:type_name -> crane.grpc.ModifyField
	138, // 21: crane.grpc.ModifyAccountRequest.type:type_name -> crane.grpc.OperationType
	134, // 22: crane.grpc.ModifyAccountReply.reason:type_name -> crane.grpc.ErrCode
	137, // 23: crane.grpc.ModifyUserRequest.modify_field:type_name -> crane.grpc.ModifyField
	138, // 24: crane.grpc.ModifyUserRequest.type:type_name -> crane.grpc.OperationType
	134, // 25: crane.grpc.ModifyUserReply.reason:type_name -> crane.grpc.ErrCode
	137, // 26: crane.grpc.ModifyQosRequest.modify_field:type_name -> crane.grpc.ModifyField
	134, // 27: crane.grpc.ModifyQosReply.reason:type_name -> crane.grpc.ErrCode
	134, // 28: crane.grpc.QueryAccountInfoReply.reason:type_name -> crane.grpc.ErrCode
	133, // 29: crane.grpc.QueryAccountInfoReply.account_list:type_name -> crane.grpc.AccountInfo
	134, // 30: crane.grpc.QueryUserInfoReply.reason:type_name -> crane.grpc.ErrCode
	135, // 31: crane.grpc.QueryUserInfoReply.user_list:type_name -> crane.grpc.UserInfo
	134, // 32: crane.grpc.QueryQosInfoReply.reason:type_name -> crane.grpc.ErrCode
	136, // 33: crane.grpc.QueryQosInfoReply.qos_list:type_name -> crane.grpc.QosInfo
	139, // 34: crane.grpc.BlockAccountOrUserRequest.entity_type:type_name -> crane.grpc.EntityType
	134, // 35: crane.grpc.BlockAccountOrUserReply.reason:type_name -> crane.grpc.ErrCode
	93,  // 36: crane.grpc.QueryTaskEnvVariablesReply.env_map:type_name -> crane.grpc.QueryTaskEnvVariablesReply.EnvMapEntry
	94,  // 37: crane.grpc.QueryTaskEnvVariablesForwardReply.env_map:type_name -> crane.grpc.QueryTaskEnvVariablesForwardReply.EnvMapEntry
	140, // 38: crane.grpc.QueryClusterInfoRequest.filter_craned_resource_states:type_name -> crane.grpc.CranedResourceState
	132, // 39: crane.grpc.QueryClusterInfoRequest.filter_craned_control_states:type_name -> crane.grpc.CranedControlState
	141, // 40: crane.grpc.QueryClusterInfoReply.partitions:type_name -> crane.grpc.TrimmedPartitionInfo
	126, // 41: crane.grpc.QueryTasksInfoRequest.filter_task_states:type_name -> crane.grpc.TaskStatus
	142, // 42: crane.grpc.QueryTasksInfoRequest.filter_submit_time_interval:type_name -> crane.grpc.TimeInterval
	142, // 43: crane.grpc.QueryTasksInfoRequest.filter_start_time_interval:type_name -> crane.grpc.TimeInterval
	142, // 44: crane.grpc.QueryTasksInfoRequest.filter_end_time_interval:type_name -> crane.grpc.TimeInterval
	143, // 45: crane.grpc.QueryTasksInfoReply.task_info_list:type_name -> crane.grpc.TaskInfo
	1,   // 46: crane.grpc.StreamCallocRequest.type:type_name -> crane.grpc.StreamCallocRequest.CallocRequestType
	95,  // 47: crane.grpc.StreamCallocRequest.payload_task_req:type_name -> crane.grpc.StreamCallocRequest.TaskReq
	96,  // 48: crane.grpc.StreamCallocRequest.payload_task_complete_req:type_name -> crane.grpc.StreamCallocRequest.TaskCompleteReq
	2,   // 49: crane.grpc.StreamCforedReply.type:type_name -> crane.grpc.StreamCforedReply.CforedReplyType
	97,  // 50: crane.grpc.StreamCforedReply.payload_task_id_reply:type_name -> crane.grpc.StreamCforedReply.TaskIdReply
	98,  // 51: crane.grpc.StreamCforedReply.payload_task_alloc_reply:type_name -> crane.grpc.StreamCforedReply.TaskResAllocatedReply
	99,  // 52: crane.grpc.StreamCforedReply.payload_task_cancel_request:type_name -> crane.grpc.StreamCforedReply.TaskCancelRequest
	100, // 53: crane.grpc.StreamCforedReply.payload_task_completion_ack_reply:type_name -> crane.grpc.StreamCforedReply.TaskCompletionAckReply
	3,   // 54: crane.grpc.StreamCforedRequest.type:type_name -> crane.grpc.StreamCforedRequest.CforedRequestType
	101, // 55: crane.grpc.StreamCforedRequest.payload_cfored_reg:type_name -> crane.grpc.StreamCforedRequest.CforedReg
	102, // 56: crane.grpc.StreamCforedRequest.payload_task_req:type_name -> crane.grpc.StreamCforedRequest.TaskReq
	103, // 57: crane.grpc.StreamCforedRequest.payload_task_complete_req:type_name -> crane.grpc.StreamCforedRequest.TaskCompleteReq
	104, // 58: crane.grpc.StreamCforedRequest.payload_graceful_exit_req:type_name -> crane.grpc.StreamCforedRequest.GracefulExitReq
	4,   // 59: crane.grpc.StreamCtldReply.type:type_name -> crane.grpc.StreamCtldReply.CtldReplyType
	109, // 60: crane.grpc.StreamCtldReply.payload_cfored_reg_ack:type_name -> crane.grpc.StreamCtldReply.CforedRegistrationAck
	106, // 61: crane.grpc.StreamCtldReply.payload_task_res_alloc_reply:type_name -> crane.grpc.StreamCtldReply.TaskResAllocatedReply
	107, // 62: crane.grpc.StreamCtldReply.payload_task_cancel_request:type_name -> crane.grpc.StreamCtldReply.TaskCancelRequest
	108, // 63: crane.grpc.StreamCtldReply.payload_task_completion_ack:type_name -> crane.grpc.StreamCtldReply.TaskCompletionAckReply
	105, // 64: crane.grpc.StreamCtldReply.payload_task_id_reply:type_name -> crane.grpc.StreamCtldReply.TaskIdReply
	110, // 65: crane.grpc.StreamCtldReply.payload_graceful_exit_ack:type_name -> crane.grpc.StreamCtldReply.CforedGracefulExitAck
	144, // 66: crane.grpc.QueryCranedRemoteMetaReply.craned_remote_meta:type_name -> crane.grpc.CranedRemoteMeta
	5,   // 67: crane.grpc.StreamCrunRequest.type:type_name -> crane.grpc.StreamCrunRequest.CrunRequestType
	111, // 68: crane.grpc.StreamCrunRequest.payload_task_req:type_name -> crane.grpc.StreamCrunRequest.TaskReq
	112, // 69: crane.grpc.StreamCrunRequest.payload_task_complete_req:type_name -> crane.grpc.StreamCrunRequest.TaskCompleteReq
	113, // 70: crane.grpc.StreamCrunRequest.payload_task_io_forward_req:type_name -> crane.grpc.StreamCrunRequest.TaskIOForwardReq
	6,   // 71: crane.grpc.StreamCforedCrunReply.type:type_name -> crane.grpc.StreamCforedCrunReply.CforedCrunReplyType
	114, // 72: crane.grpc.StreamCforedCrunReply.payload_task_id_reply:type_name -> crane.grpc.StreamCforedCrunReply.TaskIdReply
	115, // 73: crane.grpc.StreamCforedCrunReply.payload_task_alloc_reply:type_name -> crane.grpc.StreamCforedCrunReply.TaskResAllocatedReply
	116, // 74: crane.grpc.StreamCforedCrunReply.payload_task_cancel_request:type_name -> crane.grpc.StreamCforedCrunReply.TaskCancelRequest
	117, // 75: crane.grpc.StreamCforedCrunReply.payload_task_completion_ack_reply:type_name -> crane.grpc.StreamCforedCrunReply.TaskCompletionAckReply
	118, // 76: crane.grpc.StreamCforedCrunReply.payload_task_io_forward_ready_reply:type_name -> crane.grpc.StreamCforedCrunReply.TaskIOForwardReadyReply
	119, // 77: crane.grpc.StreamCforedCrunReply.payload_task_io_forward_reply:type_name -> crane.grpc.StreamCforedCrunReply.TaskIOForwardReply
	7,   // 78: crane.grpc.StreamCforedTaskIORequest.type:type_name -> crane.grpc.StreamCforedTaskIORequest.CranedRequestType
	120, // 79: crane.grpc.StreamCforedTaskIORequest.payload_register_req:type_name -> crane.grpc.StreamCforedTaskIORequest.CranedRegisterReq
	121, // 80: crane.grpc.StreamCforedTaskIORequest.payload_task_output_req:type_name -> crane.grpc.StreamCforedTaskIORequest.CranedTaskOutputReq
	122, // 81: crane.grpc.StreamCforedTaskIORequest.payload_unregister_req:type_name -> crane.grpc.StreamCforedTaskIORequest.CranedUnRegisterReq
	8,   // 82: crane.grpc.StreamCforedTaskIOReply.type:type_name -> crane.grpc.StreamCforedTaskIOReply.CranedReplyType
	123, // 83: crane.grpc.StreamCforedTaskIOReply.payload_craned_register_reply:type_name -> crane.grpc.StreamCforedTaskIOReply.CranedRegisterReply
	124, // 84: crane.grpc.StreamCforedTaskIOReply.payload_task_input_req:type_name -> crane.grpc.StreamCforedTaskIOReply.CranedTaskInputReq
	125, // 85: crane.grpc.StreamCforedTaskIOReply.payload_craned_unregister_reply:type_name -> crane.grpc.StreamCforedTaskIOReply.CranedUnregisterReply
	127, // 86: crane.grpc.StreamCallocRequest.TaskReq.task:type_name -> crane.grpc.TaskToCtld
	126, // 87: crane.grpc.StreamCallocRequest.TaskCompleteReq.status:type_name -> crane.grpc.TaskStatus
	127, // 88: crane.grpc.StreamCforedRequest.TaskReq.task:type_name -> crane.grpc.TaskToCtld
	126, // 89: crane.grpc.StreamCforedRequest.TaskCompleteReq.status:type_name -> crane.grpc.TaskStatus
	145, // 90: crane.grpc.StreamCforedRequest.TaskCompleteReq.interactive_type:type_name -> crane.grpc.InteractiveTaskType
	127, // 91: crane.grpc.StreamCrunRequest.TaskReq.task:type_name -> crane.grpc.TaskToCtld
	126, // 92: crane.grpc.StreamCrunRequest.TaskCompleteReq.status:type_name -> crane.grpc.TaskStatus
	9,   // 93: crane.grpc.CraneCtld.TaskStatusChange:input_type -> crane.grpc.TaskStatusChangeRequest
	11,  // 94: crane.grpc.CraneCtld.CranedRegister:input_type -> crane.grpc.CranedRegisterRequest
	85,  // 95: crane.grpc.CraneCtld.CforedStream:input_type -> crane.grpc.StreamCforedRequest
	33,  // 96: crane.grpc.CraneCtld.CancelTask:input_type -> crane.grpc.CancelTaskRequest
	15,  // 97: crane.grpc.CraneCtld.SubmitBatchTask:input_type -> crane.grpc.SubmitBatchTaskRequest
	17,  // 98: crane.grpc.CraneCtld.SubmitBatchTasks:input_type -> crane.grpc.SubmitBatchTasksRequest
	39,  // 99: crane.grpc.CraneCtld.QueryCranedInfo:input_type -> crane.grpc.QueryCranedInfoRequest
	41,  // 100: crane.grpc.CraneCtld.QueryPartitionInfo:input_type -> crane.grpc.QueryPartitionInfoRequest
	43,  // 101: crane.grpc.CraneCtld.ModifyTask:input_type -> crane.grpc.ModifyTaskRequest
	45,  // 102: crane.grpc.CraneCtld.ModifyNode:input_type -> crane.grpc.ModifyCranedStateRequest
	47,  // 103: crane.grpc.CraneCtld.AddAccount:input_type -> crane.grpc.AddAccountRequest
	49,  // 104: crane.grpc.CraneCtld.AddUser:input_type -> crane.grpc.AddUserRequest
	51,  // 105: crane.grpc.CraneCtld.AddQos:input_type -> crane.grpc.AddQosRequest
	53,  // 106: crane.grpc.CraneCtld.DeleteAccount:input_type -> crane.grpc.DeleteAccountRequest
	55,  // 107: crane.grpc.CraneCtld.DeleteUser:input_type -> crane.grpc.DeleteUserRequest
	57,  // 108: crane.grpc.CraneCtld.DeleteQos:input_type -> crane.grpc.DeleteQosRequest
	65,  // 109: crane.grpc.CraneCtld.QueryAccountInfo:input_type -> crane.grpc.QueryAccountInfoRequest
	67,  // 110: crane.grpc.CraneCtld.QueryUserInfo:input_type -> crane.grpc.QueryUserInfoRequest
	69,  // 111: crane.grpc.CraneCtld.QueryQosInfo:input_type -> crane.grpc.QueryQosInfoRequest
	59,  // 112: crane.grpc.CraneCtld.ModifyAccount:input_type -> crane.grpc.ModifyAccountRequest
	61,  // 113: crane.grpc.CraneCtld.ModifyUser:input_type -> crane.grpc.ModifyUserRequest
	63,  // 114: crane.grpc.CraneCtld.ModifyQos:input_type -> crane.grpc.ModifyQosRequest
	71,  // 115: crane.grpc.CraneCtld.BlockAccountOrUser:input_type -> crane.grpc.BlockAccountOrUserRequest
	79,  // 116: crane.grpc.CraneCtld.QueryClusterInfo:input_type -> crane.grpc.QueryClusterInfoRequest
	81,  // 117: crane.grpc.CraneCtld.QueryTasksInfo:input_type -> crane.grpc.QueryTasksInfoRequest
	19,  // 118: crane.grpc.Craned.ExecuteTask:input_type -> crane.grpc.ExecuteTasksRequest
	31,  // 119: crane.grpc.Craned.CheckTaskStatus:input_type -> crane.grpc.CheckTaskStatusRequest
	21,  // 120: crane.grpc.Craned.CreateCgroupForTasks:input_type -> crane.grpc.CreateCgroupForTasksRequest
	23,  // 121: crane.grpc.Craned.ReleaseCgroupForTasks:input_type -> crane.grpc.ReleaseCgroupForTasksRequest
	87,  // 122: crane.grpc.Craned.QueryCranedRemoteMeta:input_type -> crane.grpc.QueryCranedRemoteMetaRequest
	25,  // 123: crane.grpc.Craned.TerminateTasks:input_type -> crane.grpc.TerminateTasksRequest
	27,  // 124: crane.grpc.Craned.TerminateOrphanedTask:input_type -> crane.grpc.TerminateOrphanedTaskRequest
	29,  // 125: crane.grpc.Craned.ChangeTaskTimeLimit:input_type -> crane.grpc.ChangeTaskTimeLimitRequest
	35,  // 126: crane.grpc.Craned.QueryTaskIdFromPort:input_type -> crane.grpc.QueryTaskIdFromPortRequest
	37,  // 127: crane.grpc.Craned.QueryTaskIdFromPortForward:input_type -> crane.grpc.QueryTaskIdFromPortForwardRequest
	73,  // 128: crane.grpc.Craned.MigrateSshProcToCgroup:input_type -> crane.grpc.MigrateSshProcToCgroupRequest
	75,  // 129: crane.grpc.Craned.QueryTaskEnvVariables:input_type -> crane.grpc.QueryTaskEnvVariablesRequest
	77,  // 130: crane.grpc.Craned.QueryTaskEnvVariablesForward:input_type -> crane.grpc.QueryTaskEnvVariablesForwardRequest
	83,  // 131: crane.grpc.CraneForeD.CallocStream:input_type -> crane.grpc.StreamCallocRequest
	89,  // 132: crane.grpc.CraneForeD.CrunStream:input_type -> crane.grpc.StreamCrunRequest
	91,  // 133: crane.grpc.CraneForeD.TaskIOStream:input_type -> crane.grpc.StreamCforedTaskIORequest
	35,  // 134: crane.grpc.CraneForeD.QueryTaskIdFromPort:input_type -> crane.grpc.QueryTaskIdFromPortRequest
	10,  // 135: crane.grpc.CraneCtld.TaskStatusChange:output_type -> crane.grpc.TaskStatusChangeReply
	12,  // 136: crane.grpc.CraneCtld.CranedRegister:output_type -> crane.grpc.CranedRegisterReply
	86,  // 137: crane.grpc.CraneCtld.CforedStream:output_type -> crane.grpc.StreamCtldReply
	34,  // 138: crane.grpc.CraneCtld.CancelTask:output_type -> crane.grpc.CancelTaskReply
	16,  // 139: crane.grpc.CraneCtld.SubmitBatchTask:output_type -> crane.grpc.SubmitBatchTaskReply
	18,  // 140: crane.grpc.CraneCtld.SubmitBatchTasks:output_type -> crane.grpc.SubmitBatchTasksReply
	40,  // 141: crane.grpc.CraneCtld.QueryCranedInfo:output_type -> crane.grpc.QueryCranedInfoReply
	42,  // 142: crane.grpc.CraneCtld.QueryPartitionInfo:output_type -> crane.grpc.QueryPartitionInfoReply
	44,  // 143: crane.grpc.CraneCtld.ModifyTask:output_type -> crane.grpc.ModifyTaskReply
	46,  // 144: crane.grpc.CraneCtld.ModifyNode:output_type -> crane.grpc.ModifyCranedStateReply
	48,  // 145: crane.grpc.CraneCtld.AddAccount:output_type -> crane.grpc.AddAccountReply
	50,  // 146: crane.grpc.CraneCtld.AddUser:output_type -> crane.grpc.AddUserReply
	52,  // 147: crane.grpc.CraneCtld.AddQos:output_type -> crane.grpc.AddQosReply
	54,  // 148: crane.grpc.CraneCtld.DeleteAccount:output_type -> crane.grpc.DeleteAccountReply
	56,  // 149: crane.grpc.CraneCtld.DeleteUser:output_type -> crane.grpc.DeleteUserReply
	58,  // 150: crane.grpc.CraneCtld.DeleteQos:output_type -> crane.grpc.DeleteQosReply
	66,  // 151: crane.grpc.CraneCtld.QueryAccountInfo:output_type -> crane.grpc.QueryAccountInfoReply
	68,  // 152: crane.grpc.CraneCtld.QueryUserInfo:output_type -> crane.grpc.QueryUserInfoReply
	70,  // 153: crane.grpc.CraneCtld.QueryQosInfo:output_type -> crane.grpc.QueryQosInfoReply
	60,  // 154: crane.grpc.CraneCtld.ModifyAccount:output_type -> crane.grpc.ModifyAccountReply
	62,  // 155: crane.grpc.CraneCtld.ModifyUser:output_type -> crane.grpc.ModifyUserReply
	64,  // 156: crane.grpc.CraneCtld.ModifyQos:output_type -> crane.grpc.ModifyQosReply
	72,  // 157: crane.grpc.CraneCtld.BlockAccountOrUser:output_type -> crane.grpc.BlockAccountOrUserReply
	80,  // 158: crane.grpc.CraneCtld.QueryClusterInfo:output_type -> crane.grpc.QueryClusterInfoReply
	82,  // 159: crane.grpc.CraneCtld.QueryTasksInfo:output_type -> crane.grpc.QueryTasksInfoReply
	20,  // 160: crane.grpc.Craned.ExecuteTask:output_type -> crane.grpc.ExecuteTasksReply
	32,  // 161: crane.grpc.Craned.CheckTaskStatus:output_type -> crane.grpc.CheckTaskStatusReply
	22,  // 162: crane.grpc.Craned.CreateCgroupForTasks:output_type -> crane.grpc.CreateCgroupForTasksReply
	24,  // 163: crane.grpc.Craned.ReleaseCgroupForTasks:output_type -> crane.grpc.ReleaseCgroupForTasksReply
	88,  // 164: crane.grpc.Craned.QueryCranedRemoteMeta:output_type -> crane.grpc.QueryCranedRemoteMetaReply
	26,  // 165: crane.grpc.Craned.TerminateTasks:output_type -> crane.grpc.TerminateTasksReply
	28,  // 166: crane.grpc.Craned.TerminateOrphanedTask:output_type -> crane.grpc.TerminateOrphanedTaskReply
	30,  // 167: crane.grpc.Craned.ChangeTaskTimeLimit:output_type -> crane.grpc.ChangeTaskTimeLimitReply
	36,  // 168: crane.grpc.Craned.QueryTaskIdFromPort:output_type -> crane.grpc.QueryTaskIdFromPortReply
	38,  // 169: crane.grpc.Craned.QueryTaskIdFromPortForward:output_type -> crane.grpc.QueryTaskIdFromPortForwardReply
	74,  // 170: crane.grpc.Craned.MigrateSshProcToCgroup:output_type -> crane.grpc.MigrateSshProcToCgroupReply
	76,  // 171: crane.grpc.Craned.QueryTaskEnvVariables:output_type -> crane.grpc.QueryTaskEnvVariablesReply
	78,  // 172: crane.grpc.Craned.QueryTaskEnvVariablesForward:output_type -> crane.grpc.QueryTaskEnvVariablesForwardReply
	84,  // 173: crane.grpc.CraneForeD.CallocStream:output_type -> crane.grpc.StreamCforedReply
	90,  // 174: crane.grpc.CraneForeD.CrunStream:output_type -> crane.grpc.StreamCforedCrunReply
	92,  // 175: crane.grpc.CraneForeD.TaskIOStream:output_type -> crane.grpc.StreamCforedTaskIOReply
	36,  // 176: crane.grpc.CraneForeD.QueryTaskIdFromPort:output_type -> crane.grpc.QueryTaskIdFromPortReply
	135, // [135:177] is the sub-list for method output_type
	93,  // [93:135] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_Crane_proto_init() }
func file_Crane_proto_init() {
	if File_Crane_proto != nil {
		return
	}
	file_PublicDefs_proto_init()
	file_Crane_proto_msgTypes[7].OneofWrappers = []any{
		(*SubmitBatchTaskReply_TaskId)(nil),
		(*SubmitBatchTaskReply_Reason)(nil),
	}
	file_Crane_proto_msgTypes[34].OneofWrappers = []any{
		(*ModifyTaskRequest_TimeLimitSeconds)(nil),
		(*ModifyTaskRequest_MandatedPriority)(nil),
		(*ModifyTaskRequest_HoldSeconds)(nil),
	}
	file_Crane_proto_msgTypes[74].OneofWrappers = []any{
		(*StreamCallocRequest_PayloadTaskReq)(nil),
		(*StreamCallocRequest_PayloadTaskCompleteReq)(nil),
	}
	file_Crane_proto_msgTypes[75].OneofWrappers = []any{
		(*StreamCforedReply_PayloadTaskIdReply)(nil),
		(*StreamCforedReply_PayloadTaskAllocReply)(nil),
		(*StreamCforedReply_PayloadTaskCancelRequest)(nil),
		(*StreamCforedReply_PayloadTaskCompletionAckReply)(nil),
	}
	file_Crane_proto_msgTypes[76].OneofWrappers = []any{
		(*StreamCforedRequest_PayloadCforedReg)(nil),
		(*StreamCforedRequest_PayloadTaskReq)(nil),
		(*StreamCforedRequest_PayloadTaskCompleteReq)(nil),
		(*StreamCforedRequest_PayloadGracefulExitReq)(nil),
	}
	file_Crane_proto_msgTypes[77].OneofWrappers = []any{
		(*StreamCtldReply_PayloadCforedRegAck)(nil),
		(*StreamCtldReply_PayloadTaskResAllocReply)(nil),
		(*StreamCtldReply_PayloadTaskCancelRequest)(nil),
		(*StreamCtldReply_PayloadTaskCompletionAck)(nil),
		(*StreamCtldReply_PayloadTaskIdReply)(nil),
		(*StreamCtldReply_PayloadGracefulExitAck)(nil),
	}
	file_Crane_proto_msgTypes[80].OneofWrappers = []any{
		(*StreamCrunRequest_PayloadTaskReq)(nil),
		(*StreamCrunRequest_PayloadTaskCompleteReq)(nil),
		(*StreamCrunRequest_PayloadTaskIoForwardReq)(nil),
	}
	file_Crane_proto_msgTypes[81].OneofWrappers = []any{
		(*StreamCforedCrunReply_PayloadTaskIdReply)(nil),
		(*StreamCforedCrunReply_PayloadTaskAllocReply)(nil),
		(*StreamCforedCrunReply_PayloadTaskCancelRequest)(nil),
		(*StreamCforedCrunReply_PayloadTaskCompletionAckReply)(nil),
		(*StreamCforedCrunReply_PayloadTaskIoForwardReadyReply)(nil),
		(*StreamCforedCrunReply_PayloadTaskIoForwardReply)(nil),
	}
	file_Crane_proto_msgTypes[82].OneofWrappers = []any{
		(*StreamCforedTaskIORequest_PayloadRegisterReq)(nil),
		(*StreamCforedTaskIORequest_PayloadTaskOutputReq)(nil),
		(*StreamCforedTaskIORequest_PayloadUnregisterReq)(nil),
	}
	file_Crane_proto_msgTypes[83].OneofWrappers = []any{
		(*StreamCforedTaskIOReply_PayloadCranedRegisterReply)(nil),
		(*StreamCforedTaskIOReply_PayloadTaskInputReq)(nil),
		(*StreamCforedTaskIOReply_PayloadCranedUnregisterReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Crane_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   117,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_Crane_proto_goTypes,
		DependencyIndexes: file_Crane_proto_depIdxs,
		EnumInfos:         file_Crane_proto_enumTypes,
		MessageInfos:      file_Crane_proto_msgTypes,
	}.Build()
	File_Crane_proto = out.File
	file_Crane_proto_rawDesc = nil
	file_Crane_proto_goTypes = nil
	file_Crane_proto_depIdxs = nil
}
